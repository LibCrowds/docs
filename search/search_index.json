{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LibCrowds Documentation LibCrowds is a platform for hosting experimental crowdsourcing projects aimed at collecting metadata for digitised content. The application comprises a set of core webpages, including a homepage and an administration interface. Sitting beneath these, microsites that encapsulate related projects can be configured, each with their own set of themed pages. Getting started To get started, you might find some of these links useful: Want to create a project? Check out the New Project guide. Need to modify a collection microsite? See the Collections section. Installing an instance of LibCrowds? See the Setup section.","title":"Introduction"},{"location":"#libcrowds-documentation","text":"LibCrowds is a platform for hosting experimental crowdsourcing projects aimed at collecting metadata for digitised content. The application comprises a set of core webpages, including a homepage and an administration interface. Sitting beneath these, microsites that encapsulate related projects can be configured, each with their own set of themed pages.","title":"LibCrowds Documentation"},{"location":"#getting-started","text":"To get started, you might find some of these links useful: Want to create a project? Check out the New Project guide. Need to modify a collection microsite? See the Collections section. Installing an instance of LibCrowds? See the Setup section.","title":"Getting started"},{"location":"analysis/","text":"LibCrowds implements a real-time results analysis process that is triggered whenever a task recieves the minimum number of required contributions. According to the normalisation and analysis rules specified for the project, there two possible outcomes of this process: A final result for the task is established and stored. The task is marked as requiring an additional contribution, after which the process will be triggered again. Data structure The final results for all LibCrowds projects are stored as lists of annotations serialised according to the Web Annotation data model. Web Annotations are a W3C standard used to make data more easily reusable online. For information about the data and how it can be reused see the Data section . Normalisation Each project template provides custom normalisation options that are applied during the results analysis process. These options include case-conversion, trimming of punctuation and formatting dates consistently. Details of the available normalisation rules are given in the Templates Analysis Rules guide. Task redundancy The analysis process is first triggered when the minimum number of required contributions for a task is reached. For tagging tasks is the point at which the tags are clustered together and those clusters used to create a final result. For all other tasks this minimum refers to the number of contributions that must match (following normalisation) before an answer will be stored as a final result. If the minimum is not met then the number of answers required for a task will be increased until the maximum is reached, after which no answer will be stored. Guidance on how to set the minimum and maximum contributions for a set of projects is given in the Templates Core Details guide. Example scenarios Let's image that your project requires a minimum of 3 and a maximum of 5 contributions and that at least 3 of these contributions must match before an answer is considered valid, then the following scenarios could apply. Scenario one: Valid result established during the first pass 3 contributions are submitted for a task. The analysis process is triggered. We find that 3 out of 3 contributions match (following normalisation). The final result is stored as a list of the matching annotations. Scenario two: Valid result found during the second pass 3 contributions are submitted for a task. The analysis process is triggered. We find that 2 out of 3 contributions match (following normalisation). The task is marked as now requiring 4 contributions. Another contribution is submitted. The analysis process is triggered. We find that 3 out of 4 contributions match (following normalisation). The final result is stored as a list of the matching annotations. Scenario three: No valid result established 3 contributions are submitted for a task. The analysis process is triggered. We find that 2 out of 3 contributions match (following normalisation). The task is marked as now requiring 4 contributions. Another contribution is submitted. The analysis process is triggered. We find that 2 out of 4 contributions match (following normalisation). The task is marked as now requiring 5 contributions. Another contribution is submitted. The analysis process is triggered. We find that 2 out of 4 contributions match (following normalisation). The final result is stored as an empty list. Annotation types There are three main types of annotation produced by the platform, each of which are analysed in different ways. Tagging Tagging annotations are used to mark up areas of an image. For example, this type of annotation would be used in a IIIF Annotation project designed to mark up all of the titles on a page. If area selections are found during the analysis process then we cluster together any selections that overlap by a given amount and add an annotation for each cluster to the final result. So, if three users marked up the same title, with slightly different regions, then these three regions should be detected as similar and clustered into one marked up region. The area for that clustered region is the smallest region that contains all three sets of original coordinates. Similarity is determined using the Jaccard index , with a result greater than 0.5. That is, we take two regions, calculate the intersection over the union, and if the result is greater than 0.5 we merge the two regions. Describing Describing annotations are used for any user-submitted transcriptions. One annotation is created for each form field submitted. For example, this type of annotation would be used in a Z39.50 project designed to associate control numbers with a reference for an image. If transcriptions are found during the analysis process they are normalised according to the rules specified for the project and any that then match exactly are grouped together and a count taken of the value with the highest number of matches. If this value is greater than or equal to the minimum number of matching answers required for the project an annotation is added to the final result. Commenting Commenting annotations are used to store user-submitted comments. These comments are associated with the image as a whole rather than a specific field. Comments are not modified during the analysis process. A commenting annotation is added to the final result for each comment found. Exclusion The automated analysis process will not be triggered for a result if any of the scenarios below apply. 1. The result has a child Some LibCrowds projects can be generated with a parent-child relationship . If the analysis is triggered for any results where a child task has been built from that result nothing will be updated. This is because doing so could break the links between any child and parent annotations. 2. The result has been modified manually If a result has been modified manually, since creation, it will no longer be updated by the automated results analysis process. This really only applies if the results analysis is run again over the entire collection, such as from the Admin Results page.","title":"Results Analysis"},{"location":"analysis/#data-structure","text":"The final results for all LibCrowds projects are stored as lists of annotations serialised according to the Web Annotation data model. Web Annotations are a W3C standard used to make data more easily reusable online. For information about the data and how it can be reused see the Data section .","title":"Data structure"},{"location":"analysis/#normalisation","text":"Each project template provides custom normalisation options that are applied during the results analysis process. These options include case-conversion, trimming of punctuation and formatting dates consistently. Details of the available normalisation rules are given in the Templates Analysis Rules guide.","title":"Normalisation"},{"location":"analysis/#task-redundancy","text":"The analysis process is first triggered when the minimum number of required contributions for a task is reached. For tagging tasks is the point at which the tags are clustered together and those clusters used to create a final result. For all other tasks this minimum refers to the number of contributions that must match (following normalisation) before an answer will be stored as a final result. If the minimum is not met then the number of answers required for a task will be increased until the maximum is reached, after which no answer will be stored. Guidance on how to set the minimum and maximum contributions for a set of projects is given in the Templates Core Details guide.","title":"Task redundancy"},{"location":"analysis/#example-scenarios","text":"Let's image that your project requires a minimum of 3 and a maximum of 5 contributions and that at least 3 of these contributions must match before an answer is considered valid, then the following scenarios could apply. Scenario one: Valid result established during the first pass 3 contributions are submitted for a task. The analysis process is triggered. We find that 3 out of 3 contributions match (following normalisation). The final result is stored as a list of the matching annotations. Scenario two: Valid result found during the second pass 3 contributions are submitted for a task. The analysis process is triggered. We find that 2 out of 3 contributions match (following normalisation). The task is marked as now requiring 4 contributions. Another contribution is submitted. The analysis process is triggered. We find that 3 out of 4 contributions match (following normalisation). The final result is stored as a list of the matching annotations. Scenario three: No valid result established 3 contributions are submitted for a task. The analysis process is triggered. We find that 2 out of 3 contributions match (following normalisation). The task is marked as now requiring 4 contributions. Another contribution is submitted. The analysis process is triggered. We find that 2 out of 4 contributions match (following normalisation). The task is marked as now requiring 5 contributions. Another contribution is submitted. The analysis process is triggered. We find that 2 out of 4 contributions match (following normalisation). The final result is stored as an empty list.","title":"Example scenarios"},{"location":"analysis/#annotation-types","text":"There are three main types of annotation produced by the platform, each of which are analysed in different ways.","title":"Annotation types"},{"location":"analysis/#tagging","text":"Tagging annotations are used to mark up areas of an image. For example, this type of annotation would be used in a IIIF Annotation project designed to mark up all of the titles on a page. If area selections are found during the analysis process then we cluster together any selections that overlap by a given amount and add an annotation for each cluster to the final result. So, if three users marked up the same title, with slightly different regions, then these three regions should be detected as similar and clustered into one marked up region. The area for that clustered region is the smallest region that contains all three sets of original coordinates. Similarity is determined using the Jaccard index , with a result greater than 0.5. That is, we take two regions, calculate the intersection over the union, and if the result is greater than 0.5 we merge the two regions.","title":"Tagging"},{"location":"analysis/#describing","text":"Describing annotations are used for any user-submitted transcriptions. One annotation is created for each form field submitted. For example, this type of annotation would be used in a Z39.50 project designed to associate control numbers with a reference for an image. If transcriptions are found during the analysis process they are normalised according to the rules specified for the project and any that then match exactly are grouped together and a count taken of the value with the highest number of matches. If this value is greater than or equal to the minimum number of matching answers required for the project an annotation is added to the final result.","title":"Describing"},{"location":"analysis/#commenting","text":"Commenting annotations are used to store user-submitted comments. These comments are associated with the image as a whole rather than a specific field. Comments are not modified during the analysis process. A commenting annotation is added to the final result for each comment found.","title":"Commenting"},{"location":"analysis/#exclusion","text":"The automated analysis process will not be triggered for a result if any of the scenarios below apply.","title":"Exclusion"},{"location":"analysis/#1-the-result-has-a-child","text":"Some LibCrowds projects can be generated with a parent-child relationship . If the analysis is triggered for any results where a child task has been built from that result nothing will be updated. This is because doing so could break the links between any child and parent annotations.","title":"1. The result has a child"},{"location":"analysis/#2-the-result-has-been-modified-manually","text":"If a result has been modified manually, since creation, it will no longer be updated by the automated results analysis process. This really only applies if the results analysis is run again over the entire collection, such as from the Admin Results page.","title":"2. The result has been modified manually"},{"location":"glossary/","text":"Glossary Collection A set of projects contained within their own microsite. An alias for category in the PYBOSSA model. Markdown A lightweight markup language used to format plain-text and add additional features such as lists, tables and links. For more guidance see this GitHub Guide . Project A set of tasks presented to the user via a task presenter. Task A particular objective to be completed for a project. Task Presenter The view component via which users contribute to a project's tasks, for example, the Z39.50 presenter. Task Redundancy The number of contributions required before a task is considered complete. Contribution A single answer for a task. An alias for task run in the PYBOSSA model. Z39.50 An ancient communications protocol still widely used in library environements.","title":"Glossary"},{"location":"glossary/#glossary","text":"","title":"Glossary"},{"location":"glossary/#collection","text":"A set of projects contained within their own microsite. An alias for category in the PYBOSSA model.","title":"Collection"},{"location":"glossary/#markdown","text":"A lightweight markup language used to format plain-text and add additional features such as lists, tables and links. For more guidance see this GitHub Guide .","title":"Markdown"},{"location":"glossary/#project","text":"A set of tasks presented to the user via a task presenter.","title":"Project"},{"location":"glossary/#task","text":"A particular objective to be completed for a project.","title":"Task"},{"location":"glossary/#task-presenter","text":"The view component via which users contribute to a project's tasks, for example, the Z39.50 presenter.","title":"Task Presenter"},{"location":"glossary/#task-redundancy","text":"The number of contributions required before a task is considered complete.","title":"Task Redundancy"},{"location":"glossary/#contribution","text":"A single answer for a task. An alias for task run in the PYBOSSA model.","title":"Contribution"},{"location":"glossary/#z3950","text":"An ancient communications protocol still widely used in library environements.","title":"Z39.50"},{"location":"z3950/","text":"The final output from Z39.50 projects is a list of MARC control numbers against some other reference (e.g. a shelfmark). Each project also gives an option to add comments, which can be used to flag up any issues where chosen records don't match exactly. So, the final results for Z39.50 tasks are stored alongside three keys: control_number reference comments The values stored alongside these keys are determined first by an automated process, then, if further checking is required, by human intervention. Automated analysis When a task has recieved the required number of contributions it is marked as complete and the following results analysis process is triggered. 1. Check if all answers are empty. This means that no users were able to find a suitable match and no comments were given. If this is the case, an empty value is stored against each answer key and the analysis process ends. Example result fragment If the process ends at this stage, the final result will be stored as below. { info : { control_number : , reference : , comments : }, last_version : true ... } 2. Check for any comments A comment given alongside an answer will often signify that the result requires further checking. So, if a comment is found then the result's last_version flag is set to false , an empty value is stored against each answer key and the analysis process ends. Example result fragment If the process ends at this stage, the final result will be stored as below. { info : { control_number : , reference : , comments : Some comment }, last_version : false ... } 3. Check if the required match rate is met If all answers were not empty, we check if a specified percentage of all answers match. That is, the control_number , reference and comments are exactly the same. By default the required match rate is 60%. This equates to, for example, at least 2 out of 3, or 3 out of 5 answers being exactly the same. If the required match rate is met we store that matching answer as the final result and the analysis process ends. Example result fragment If the process ends at this stage, the final result will be stored as below. { info : { control_number : ocm00012345 , reference : 123.abc.4 , comments : }, last_version : true ... } 4. Mark the result for further checking If there are non-empty answers and the required match rate was not met then we mark the result for further checking by setting the last_version flag to false . Example result fragment If the process ends at this stage, the final result will be stored as below. { info : { control_number : , reference : , comments : }, last_version : false ... }","title":"Z39.50"},{"location":"z3950/#automated-analysis","text":"When a task has recieved the required number of contributions it is marked as complete and the following results analysis process is triggered.","title":"Automated analysis"},{"location":"z3950/#1-check-if-all-answers-are-empty","text":"This means that no users were able to find a suitable match and no comments were given. If this is the case, an empty value is stored against each answer key and the analysis process ends. Example result fragment If the process ends at this stage, the final result will be stored as below. { info : { control_number : , reference : , comments : }, last_version : true ... }","title":"1. Check if all answers are empty."},{"location":"z3950/#2-check-for-any-comments","text":"A comment given alongside an answer will often signify that the result requires further checking. So, if a comment is found then the result's last_version flag is set to false , an empty value is stored against each answer key and the analysis process ends. Example result fragment If the process ends at this stage, the final result will be stored as below. { info : { control_number : , reference : , comments : Some comment }, last_version : false ... }","title":"2. Check for any comments"},{"location":"z3950/#3-check-if-the-required-match-rate-is-met","text":"If all answers were not empty, we check if a specified percentage of all answers match. That is, the control_number , reference and comments are exactly the same. By default the required match rate is 60%. This equates to, for example, at least 2 out of 3, or 3 out of 5 answers being exactly the same. If the required match rate is met we store that matching answer as the final result and the analysis process ends. Example result fragment If the process ends at this stage, the final result will be stored as below. { info : { control_number : ocm00012345 , reference : 123.abc.4 , comments : }, last_version : true ... }","title":"3. Check if the required match rate is met"},{"location":"z3950/#4-mark-the-result-for-further-checking","text":"If there are non-empty answers and the required match rate was not met then we mark the result for further checking by setting the last_version flag to false . Example result fragment If the process ends at this stage, the final result will be stored as below. { info : { control_number : , reference : , comments : }, last_version : false ... }","title":"4. Mark the result for further checking"},{"location":"collections/annotations/","text":"All results and user tags generated by LibCrowds are stored as Web Annotations (see the Data Model for details) on a server that complies with the Web Annotation Protocol . On this server, we create two AnnotationCollections for each LibCrowds collection microsite, one to contain the results and another to contain the tags. These Annotations are accessible via a standardised API (see the API page for details). The AnnotationCollections for a collection microsite can be managed via this section. Before a microsite is published you will need to visit this page to create the AnnotationCollections. This should only need to be done once. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Annotations from the main menu. A screenshot of a collection microsite's annotations admin page Settings AnnotationCollections will be created on the server that is linked to via the annotations setting in your main configuration file. If you need to use a different server see Configuring LibCrowds . Creating a new AnnotationCollection To create an AnnotationCollection, click the New button at the top of the page. A modal will be displayed containing some options for creating the collection, as below. A screenshot of the new AnnotationCollection modal Once you have filled in the form, click OK to create the AnnotationCollection and link it to the collection microsite. The URI for the new Annotation will appear in the read-only form field for the selected purpose. It will now be possible for Annotations to be stored for the given purpose. Settings Once projects are underway and Annotations are being stored the AnnotationCollection IRIs generated on this page should not normally be changed, especially without first migrating the data in the original AnnotationCollection.","title":"Annotations"},{"location":"collections/annotations/#creating-a-new-annotationcollection","text":"To create an AnnotationCollection, click the New button at the top of the page. A modal will be displayed containing some options for creating the collection, as below. A screenshot of the new AnnotationCollection modal Once you have filled in the form, click OK to create the AnnotationCollection and link it to the collection microsite. The URI for the new Annotation will appear in the read-only form field for the selected purpose. It will now be possible for Annotations to be stored for the given purpose. Settings Once projects are underway and Annotations are being stored the AnnotationCollection IRIs generated on this page should not normally be changed, especially without first migrating the data in the original AnnotationCollection.","title":"Creating a new AnnotationCollection"},{"location":"collections/celebrations/","text":"When a project is completed, or a user has contributed to all available tasks for a project, animated confetti will fall and a celebration message will be displayed. These celebration messages can be edited via this section, using Markdown. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Celebrations from the main menu. A screenshot of a collection microsite's celebrations admin page As the celebration message is shown, the user will also be redirected back to collection microsite's main projects page. An animation showing a project completion celebration message Updating the confetti type You can choose the shape of the confetti that you want to fall by selecting an option from the Confetti type dropdown and clicking Update . Updating the user completion celebration This is displayed when a user has completed all available tasks but the project still requires more contributions. Edit the User Completion Markdown field and click Update . Updating the project completion celebration This is displayed when a project is 100% complete. Note that this does not necessarily mean that the user has contributed to the project. The message will also be displayed if a user later attempts to access the URL of a completed project. Edit the Project Completion Markdown field and click Update . Testing To test out the messages you can click the Test user and Test project buttons at the top right of the dashboard page.","title":"Celebrations"},{"location":"collections/celebrations/#updating-the-confetti-type","text":"You can choose the shape of the confetti that you want to fall by selecting an option from the Confetti type dropdown and clicking Update .","title":"Updating the confetti type"},{"location":"collections/celebrations/#updating-the-user-completion-celebration","text":"This is displayed when a user has completed all available tasks but the project still requires more contributions. Edit the User Completion Markdown field and click Update .","title":"Updating the user completion celebration"},{"location":"collections/celebrations/#updating-the-project-completion-celebration","text":"This is displayed when a project is 100% complete. Note that this does not necessarily mean that the user has contributed to the project. The message will also be displayed if a user later attempts to access the URL of a completed project. Edit the Project Completion Markdown field and click Update .","title":"Updating the project completion celebration"},{"location":"collections/celebrations/#testing","text":"To test out the messages you can click the Test user and Test project buttons at the top right of the dashboard page.","title":"Testing"},{"location":"collections/content/","text":"Content for the About , Take Part and Data pages can be modified here, using Markdown. Changes are made in real-time, although you may have to refresh your browser to see them. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Content from the main menu. A screenshot of a collection microsite's page content admin page Updating the page content To update the page content, locate the Markdown editor associated with that page, make your changes, then click the Update button at the bottom of the page. Adding navigation tags For the About page, quick navigation links will be generated from each level two header used in the page content. These navigation items can be clicked to scroll the users window to the top of that section. For example, entering the content below would generate a \"Contact\" link at the top of the About page. This is some introductory content . ## Contact This is the contact details section .","title":"Page Content"},{"location":"collections/content/#updating-the-page-content","text":"To update the page content, locate the Markdown editor associated with that page, make your changes, then click the Update button at the bottom of the page.","title":"Updating the page content"},{"location":"collections/content/#adding-navigation-tags","text":"For the About page, quick navigation links will be generated from each level two header used in the page content. These navigation items can be clicked to scroll the users window to the top of that section. For example, entering the content below would generate a \"Contact\" link at the top of the About page. This is some introductory content . ## Contact This is the contact details section .","title":"Adding navigation tags"},{"location":"collections/delete/","text":"Collection microsites can be permanently deleted via this page. Only microsites that contain no projects can be deleted. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Delete from the main menu. A screenshot of the delete collection admin page Deleting the microsite To permanently delete a collection microsite, click the Delete button. Warning Deletion is final, there is no undo.","title":"Delete"},{"location":"collections/delete/#deleting-the-microsite","text":"To permanently delete a collection microsite, click the Delete button. Warning Deletion is final, there is no undo.","title":"Deleting the microsite"},{"location":"collections/details/","text":"This section contains the core settings for a collection microsite. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Core Details from the main menu. A screenshot of a collection microsite's details admin page Updating the collection To edit the collection, modify the form and click Update . See the hints underneath each form field for an explanation of how the setting will affect the microsite. Publishing the collection Published collections will be added to the LibCrowds homepage and be visible to all users. Before publishing a collection, please ensure that you have created a suitable set of AnnotationCollections via the Annotations page. To publish (or unpublish) a collection, click the Published toggle at the top of the page.","title":"Core Details"},{"location":"collections/details/#updating-the-collection","text":"To edit the collection, modify the form and click Update . See the hints underneath each form field for an explanation of how the setting will affect the microsite.","title":"Updating the collection"},{"location":"collections/details/#publishing-the-collection","text":"Published collections will be added to the LibCrowds homepage and be visible to all users. Before publishing a collection, please ensure that you have created a suitable set of AnnotationCollections via the Annotations page. To publish (or unpublish) a collection, click the Published toggle at the top of the page.","title":"Publishing the collection"},{"location":"collections/featured/","text":"Via this page, a set of chosen projects can be featured on the homepage of each collection microsite. If no featured projects are selected, the top three most recently created projects will be featured by default. This approach may cause a lack of variety in the projects that appear on the homepage but does mean that the list of selected projects doesn't have to be constantly updated. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Featured Projects from the main menu. A screenshot of the featured projects admin page Featuring a project To feature a project, locate it in the table and click the Add to Featured button. Unfeaturing a project To unfeature a project, locate it in the table and click the Remove from Featured button.","title":"Featured Projects"},{"location":"collections/featured/#featuring-a-project","text":"To feature a project, locate it in the table and click the Add to Featured button.","title":"Featuring a project"},{"location":"collections/featured/#unfeaturing-a-project","text":"To unfeature a project, locate it in the table and click the Remove from Featured button.","title":"Unfeaturing a project"},{"location":"collections/filters/","text":"Tags are used to help users more easily location the types of project that they're interested in. The available tag types for all projects within a collection are managed via this section. The values assigned to each tag type are managed on a per-project basis, either when creating a New Project , or via the Project Filters settings page. For example, if the Location tag type was added to a collection a project within that collection could then assign the value London . Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Project Filters from the main menu. A screenshot of the project filters admin page Each filter will be added to the collection's main projects page page, as shown below. A screenshot of a collection microsite's main projects page Creating a filter To add a new filter click the Add a filter button at the top of the page. In the modal that appears enter a name for the filter (e.g. Location) and choose a colour, then click OK . Deleting a filter Filters can be removed by locating them in the table and clicking the Remove button.","title":"Project Filters"},{"location":"collections/filters/#creating-a-filter","text":"To add a new filter click the Add a filter button at the top of the page. In the modal that appears enter a name for the filter (e.g. Location) and choose a colour, then click OK .","title":"Creating a filter"},{"location":"collections/filters/#deleting-a-filter","text":"Filters can be removed by locating them in the table and clicking the Remove button.","title":"Deleting a filter"},{"location":"collections/forum/","text":"LibCrowds integrates with the forum software, Flarum , by enabling links to a particular forum topic from the main navigation bar of each collection microsite. We also pull in a summary of recent forum posts and add it to the collection microsite's homepage, hopefully making the site seem more alive and encouraging participation. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Collection . Locate the collection in the table and click Open . Select Forum Integration from the main menu. A screenshot of the project filters admin page Linking to a forum topic To link to a forum topic, select it from the dropdown menu then click Update . A Discuss item will be added to the collection microsite's main navigation bar and recent forum activity feed to its homepage. You may have to refresh your browser to see these changes. Application Settings Note that this feature relies on the forum settings being added to the application's main configuration file .","title":"Forum Integration"},{"location":"collections/forum/#linking-to-a-forum-topic","text":"To link to a forum topic, select it from the dropdown menu then click Update . A Discuss item will be added to the collection microsite's main navigation bar and recent forum activity feed to its homepage. You may have to refresh your browser to see these changes. Application Settings Note that this feature relies on the forum settings being added to the application's main configuration file .","title":"Linking to a forum topic"},{"location":"collections/introduction/","text":"A LibCrowds collection is a set of similar projects. Each collection is given it's own set of themed pages that we call a collection microsite. Who can create collections? Collections can be created and configured by users with administrator rights. How are collection microsites configured? Collection microsites are configured via a series of forms, available to all LibCrowds administrators. These forms include options to change the page content, name, description, tagline, logo, task presenter, data reuse license, project templates and more. This section of the documentation contains details of all available settings. To find out how to create a collection microsite, see the New Collection guide.","title":"Introduction"},{"location":"collections/introduction/#who-can-create-collections","text":"Collections can be created and configured by users with administrator rights.","title":"Who can create collections?"},{"location":"collections/introduction/#how-are-collection-microsites-configured","text":"Collection microsites are configured via a series of forms, available to all LibCrowds administrators. These forms include options to change the page content, name, description, tagline, logo, task presenter, data reuse license, project templates and more. This section of the documentation contains details of all available settings. To find out how to create a collection microsite, see the New Collection guide.","title":"How are collection microsites configured?"},{"location":"collections/new/","text":"Collection microsites comprise a set of themed pages that encapsulate a set of similar projects. They can be created by registered users with administrator rights. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Click the New button at the top of the page. A screenshot of the new collection admin page Creating a collection Collections are initially created with just a name and a description. Once created, you will be given access to further configuration options that can be set before the collection is published and made visible to all users. To create a new collection enter a name and description, then click Create . See the Core Details page to find out how to update some of the collection microsite's core settings.","title":"New Collection"},{"location":"collections/new/#creating-a-collection","text":"Collections are initially created with just a name and a description. Once created, you will be given access to further configuration options that can be set before the collection is published and made visible to all users. To create a new collection enter a name and description, then click Create . See the Core Details page to find out how to update some of the collection microsite's core settings.","title":"Creating a collection"},{"location":"collections/presenter/","text":"Various task presenter settings can be applied globally to all projects within a collection via this page. Importantly, this is where the task presenter to be used for the microsite is set (e.g. IIIF Annotation or Z39.50). Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Task Presenter from the main menu. A screenshot of the collection task presenter admin page Selecting a task presenter Before a collection microsite is published it is essential to select a task presenter from the options in the Task presenter dropdown. Once projects have been created for the microsite it will not be possible to change this, as doing to would risk breaking the project within the microsite. Once you have chosen the task presenter, click Update to save your choice. Updating the note button text A button that enables volunteers to add general notes about each task is included in all task presenters. The text for this button can be configured by editing the Note button input field, then clicking Update . Updating the submit button text All task presenters contain a button to submit a task and move to the next. The text for this button can be configured by editing the Submit button input field, then clicking Update . Updating the reject button text All task presenters contain a button to reject a task and move to the next. The text for this button can be configured by editing the Reject button input field, then clicking Update . Updating the share modal text Task presenters contain a button that volunteers can click to show a share modal. This modal will contain a link to a shareable version of the content presented for the task (e.g. the image). The text that appears in this share modal, above the shareable URL, can be modified by editing the Share text Markdown field, then clicking Update .","title":"Task Presenter"},{"location":"collections/presenter/#selecting-a-task-presenter","text":"Before a collection microsite is published it is essential to select a task presenter from the options in the Task presenter dropdown. Once projects have been created for the microsite it will not be possible to change this, as doing to would risk breaking the project within the microsite. Once you have chosen the task presenter, click Update to save your choice.","title":"Selecting a task presenter"},{"location":"collections/presenter/#updating-the-note-button-text","text":"A button that enables volunteers to add general notes about each task is included in all task presenters. The text for this button can be configured by editing the Note button input field, then clicking Update .","title":"Updating the note button text"},{"location":"collections/presenter/#updating-the-submit-button-text","text":"All task presenters contain a button to submit a task and move to the next. The text for this button can be configured by editing the Submit button input field, then clicking Update .","title":"Updating the submit button text"},{"location":"collections/presenter/#updating-the-reject-button-text","text":"All task presenters contain a button to reject a task and move to the next. The text for this button can be configured by editing the Reject button input field, then clicking Update .","title":"Updating the reject button text"},{"location":"collections/presenter/#updating-the-share-modal-text","text":"Task presenters contain a button that volunteers can click to show a share modal. This modal will contain a link to a shareable version of the content presented for the task (e.g. the image). The text that appears in this share modal, above the shareable URL, can be modified by editing the Share text Markdown field, then clicking Update .","title":"Updating the share modal text"},{"location":"collections/tags/","text":"The table on this page can be used to delete item tags. Note that the same word may be used to tag multiple items and therefore could appear in the table multiple times. A search box is included at the top of the page to filter the table. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Item Tags from the main menu. A screenshot of the project filters admin page Deleting a tag Tags can be removed by locating them in the table and clicking the Delete button.","title":"Item Tags"},{"location":"collections/tags/#deleting-a-tag","text":"Tags can be removed by locating them in the table and clicking the Delete button.","title":"Deleting a tag"},{"location":"collections/volumes/","text":"The available volumes for a collection are managed via this section. Volumes provide details of the input sources from which data can be pulled during the creation of new projects. For example, a volume might be linked to a IIIF manifest containing details of a set of images. Each volume can have a different importer type, meaning that one volume within a collection can import data via IIIF, while another imports data from Flickr. Volumes are also used to group related projects within a collection, helping with the aggregation of results data. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Collections from the Admin section. Locate the collection in the table and click Open . Select Volumes from the main menu. A screenshot of a collection's volumes admin page Adding a volume To add a new volume click the New button at the top of the volumes table. A screenshot of the new volume page Volumes are added using the following form fields: Name: The name of the volume. Short Name: An identifier used, for example, in the file names of volume-level downloads. Importer: The importer type, for example, iiif or flickr. As we want to avoid defining duplicate volumes, the name and short name must contain unique values. That is, the details entered don't already exist for other volumes listed for the collection. After adding a volume you will be taken to the Update page. Here you will be given additional options to update the volume with a thumbnail and an import source. The format of the input source will depend on the type of Importer chosen; this is covered further below. Updating a volume To update a volume, locate it in the table and click Update . Note that if projects have already been built using the volume you will only be able to update the thumbnail. Otherwise, we would risk breaking functions that rely on consistent volume details, such as results aggregation. A screenshot of the update volume page A form with three tabs will be displayed: one to update the volume's metadata, one to update the import source and another to update the thumbnail image. Updating the core details Here you can update the details described in the Adding a volume section, above. To update the core details, edit the form and click Update Details . Updating the import source The input source points to the data used to generate tasks for any projects built using the volume, for example, a set of images. The fields on this page will change according to the type of importer chosen. The available importers are: iiif For volumes using the iiif importer, the source should be a IIIF manifest that contains the metadata required to display content served via the IIIF APIs. # example http : // api . bl . uk / metadata / iiif / ark : / 81055 / vdc_100022588857 . 0 x000002 / manifest . json flickr For volumes using the flickr importer, the source should be the ID of a Flickr album. Flickr album IDs can be extracted from the end of a Flickr album URL. # example 72157653533516031 # Flickr album URI https : // www . flickr . com / photos / 132066275 @N04 / albums / 72157653533516031 gdocs For volumes using the gdocs importer, the source should be the shareable URL of a Google Docs spreadsheet. # example https : // docs . google . com / spreadsheets / d / key / edit ? usp = sharing It is important that this spreadsheet contains the following columns: link: A shareable link to the data source url: An image URL url_b: A large-sized version of the image (can also be the same as url ) url_m: A medium-sized version of the image (can also be the same as url ) To update the import source, edit the form and click Update Import Source . Updating the thumbnail The thumbnail image will be used for all projects subsequently generated using the volume. To update the thumbnail, select an image and click Update Thumbnail . Deleting a volume In the rare case that you want to remove a volume, locate it in the table and click Delete . Note that deleting a volume would affect the aggregation of results for any projects already built using that volume. Therefore, you will only be able to delete volumes that are not associated with any projects. Warning Deletion is final, there is no undo.","title":"Volumes"},{"location":"collections/volumes/#adding-a-volume","text":"To add a new volume click the New button at the top of the volumes table. A screenshot of the new volume page Volumes are added using the following form fields: Name: The name of the volume. Short Name: An identifier used, for example, in the file names of volume-level downloads. Importer: The importer type, for example, iiif or flickr. As we want to avoid defining duplicate volumes, the name and short name must contain unique values. That is, the details entered don't already exist for other volumes listed for the collection. After adding a volume you will be taken to the Update page. Here you will be given additional options to update the volume with a thumbnail and an import source. The format of the input source will depend on the type of Importer chosen; this is covered further below.","title":"Adding a volume"},{"location":"collections/volumes/#updating-a-volume","text":"To update a volume, locate it in the table and click Update . Note that if projects have already been built using the volume you will only be able to update the thumbnail. Otherwise, we would risk breaking functions that rely on consistent volume details, such as results aggregation. A screenshot of the update volume page A form with three tabs will be displayed: one to update the volume's metadata, one to update the import source and another to update the thumbnail image.","title":"Updating a volume"},{"location":"collections/volumes/#updating-the-core-details","text":"Here you can update the details described in the Adding a volume section, above. To update the core details, edit the form and click Update Details .","title":"Updating the core details"},{"location":"collections/volumes/#updating-the-import-source","text":"The input source points to the data used to generate tasks for any projects built using the volume, for example, a set of images. The fields on this page will change according to the type of importer chosen. The available importers are: iiif For volumes using the iiif importer, the source should be a IIIF manifest that contains the metadata required to display content served via the IIIF APIs. # example http : // api . bl . uk / metadata / iiif / ark : / 81055 / vdc_100022588857 . 0 x000002 / manifest . json flickr For volumes using the flickr importer, the source should be the ID of a Flickr album. Flickr album IDs can be extracted from the end of a Flickr album URL. # example 72157653533516031 # Flickr album URI https : // www . flickr . com / photos / 132066275 @N04 / albums / 72157653533516031 gdocs For volumes using the gdocs importer, the source should be the shareable URL of a Google Docs spreadsheet. # example https : // docs . google . com / spreadsheets / d / key / edit ? usp = sharing It is important that this spreadsheet contains the following columns: link: A shareable link to the data source url: An image URL url_b: A large-sized version of the image (can also be the same as url ) url_m: A medium-sized version of the image (can also be the same as url ) To update the import source, edit the form and click Update Import Source .","title":"Updating the import source"},{"location":"collections/volumes/#updating-the-thumbnail","text":"The thumbnail image will be used for all projects subsequently generated using the volume. To update the thumbnail, select an image and click Update Thumbnail .","title":"Updating the thumbnail"},{"location":"collections/volumes/#deleting-a-volume","text":"In the rare case that you want to remove a volume, locate it in the table and click Delete . Note that deleting a volume would affect the aggregation of results for any projects already built using that volume. Therefore, you will only be able to delete volumes that are not associated with any projects. Warning Deletion is final, there is no undo.","title":"Deleting a volume"},{"location":"data/api/","text":"The final results for all LibCrowds projects are stored as lists of annotations serialised according to the Web Annotation data model. Web Annotations are a W3C standard used to make data more easily reusable online. To manage these Annotations, LibCrowds implements its own Annotation Server. As well as the final results data this server is used to store supplementary information, such as user-generated image tags. By storing our data as Web Annotations and making it available via a a standardised API we hope to make the efforts of our volunteers more easily shareable and enable further research by programatic means. Importantly, this data will always be live, so as soon as a task is completed and the contributions analysed the result will be available via this API. Data Model The structure of the Annotations referenced below is described in our Data Model . The Annotation Server used by LibCrowds is called Explicates . The server complies with the Web Annotation Protocol and includes additional features for searching and exporting data. All POST, PUT and DELETE requests are restricted, only GET requests are publically available. The following section describes the various endpoints available for retrieving data from LibCrowds programatically. Annotation Collections All Annotations are stored in an Annotation Collection. Each collection microsite makes use of several of these Annotation Collections. For instance, there will be one that contains all of the results and another that contains all of the image tags. List all Annotation Collections GET https://annotations.libcrowds.com/annotations/ Example Request: GET https://annotations.libcrowds.com/annotations/ Response: { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/ , label : All collections , total : 3 , type : [ AnnotationCollection , BasicContainer ], items : [ { created : 2018-05-18T00:04:15Z , creator : https://www.libcrowds.com/api/category/22 , generated : 2018-05-20T22:05:15Z , id : https://annotations.libcrowds.com/annotations/playbills-tags/ , label : Playbills Image Tags , total : 12 , type : [ AnnotationCollection , BasicContainer ] }, { created : 2018-05-18T00:04:37Z , creator : https://www.libcrowds.com/api/category/22 , generated : 2018-05-20T22:05:17Z , id : https://annotations.libcrowds.com/annotations/playbills-results/ , label : Playbills Results , total : 11926 , type : [ AnnotationCollection , BasicContainer ] } ] } Get an Annotation Collection GET https://annotations.libcrowds.com/annotations/ collection_id / Example Request: GET https : // annotations . libcrowds . com / annotations / playbills - results / Response: { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/ , label : Playbills Results , total : 11926 , generated : 2018-05-20T22:12:03Z , type : [ AnnotationCollection , BasicContainer ], first : { id : https://annotations.libcrowds.com/annotations/playbills-results/?page=0 , items : [ { id : https://annotations.libcrowds.com/annotations/playbills-results/963ebbaa-4602-4ea5-8a4e-3ad7fde23611/ , motivation : describing , type : Annotation , body : [ { format : text/plain , purpose : describing , type : TextualBody , value : 1816-01-27 }, { purpose : tagging , type : TextualBody , value : date } ], created : 2018-05-20T19:15:31Z , generated : 2018-05-20T22:12:03Z , generator : [ { homepage : https://www.libcrowds.com , id : https://github.com/LibCrowds/libcrowds , name : LibCrowds , type : Software }, { id : https://backend.libcrowds.com/api/task/82346 , type : Software } ], target : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589024.0x000285 }, ... ] }, last : https://annotations.libcrowds.com/annotations/playbills-results/?page=12 , } Annotation Pages As an Annotation Collection could grow very large Annotations are paginated using Annotation Pages, which can be traversed by following the next and prev links between pages. Get an AnnotationPage GET https://annotations.libcrowds.com/annotations/ collection_id /?page=0 Example Request: GET https : // annotations . libcrowds . com / annotations / playbills - results /? page = 0 Response: { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/?page=0 , type : AnnotationPage , items : [ { id : https://annotations.libcrowds.com/annotations/playbills-results/963ebbaa-4602-4ea5-8a4e-3ad7fde23611/ , motivation : describing , type : Annotation , body : [ { format : text/plain , purpose : describing , type : TextualBody , value : 1816-01-27 }, { purpose : tagging , type : TextualBody , value : date } ], created : 2018-05-20T19:15:31Z , generated : 2018-05-20T22:12:03Z , generator : [ { homepage : https://www.libcrowds.com , id : https://github.com/LibCrowds/libcrowds , name : LibCrowds , type : Software }, { id : https://backend.libcrowds.com/api/task/82346 , type : Software } ], target : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589024.0x000285 }, ... ], startIndex : 0 , partOf : { created : 2018-05-18T00:04:37Z , creator : https://www.libcrowds.com/api/category/22 , generated : 2018-05-20T22:26:39Z , id : https://annotations.libcrowds.com/annotations/playbills-results/ , label : Playbills Results , total : 12744 , type : [ AnnotationCollection , BasicContainer ] }, next : https://annotations.libcrowds.com/annotations/playbills-results/?page=1 } Annotations Each Annotation has a Body, which is a comment or other descriptive resource, and a Target that the Body is somehow \"about\". See the Data Model for further details. Get an Annotation GET https://annotations.libcrowds.com/annotations/ collection_id / annotation_id / Example Request: GET https : // annotations . libcrowds . com / annotations / playbills - results / 963 ebbaa - 4602 - 4 ea5 - 8 a4e - 3 ad7fde23611 / Response: { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/963ebbaa-4602-4ea5-8a4e-3ad7fde23611/ , motivation : describing , type : Annotation , body : [ { format : text/plain , purpose : describing , type : TextualBody , value : 1816-01-27 }, { purpose : tagging , type : TextualBody , value : date } ], created : 2018-05-20T19:15:31Z , generated : 2018-05-20T22:12:03Z , generator : [ { homepage : https://www.libcrowds.com , id : https://github.com/LibCrowds/libcrowds , name : LibCrowds , type : Software }, { id : https://backend.libcrowds.com/api/task/82346 , type : Software } ], target : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589024.0x000285 } Search A search service for Annotations is provided at the following endpoint: GET https : // annotations . libcrowds . com / search / The query parameters accepted by this search service are listed below. contains Search for Annotations that contain the given value. Example Request: GET https : // annotations . libcrowds . com / search /? contains = { motivation : describing } fts Full text search... Example Request: GET https : // annotations . libcrowds . com / search /? fts = body :: Merchant : * Export Collections can be exported for offline analysis or migration purposes via the following endpoint: GET https : // annotations . libcrowds . com / export / collection_id /? zip = 1 Note that without the zip parameter the entire Annotation Collection will be streamed. This is useful for exporting to a file programatically but may take a long time to complete if run in a browser! Here's an example of using this endpoint to download data to a JSON file: curl https://annotations.libcrowds.com/export/playbills-tags test.json","title":"API"},{"location":"data/api/#annotation-collections","text":"All Annotations are stored in an Annotation Collection. Each collection microsite makes use of several of these Annotation Collections. For instance, there will be one that contains all of the results and another that contains all of the image tags.","title":"Annotation Collections"},{"location":"data/api/#list-all-annotation-collections","text":"GET https://annotations.libcrowds.com/annotations/ Example Request: GET https://annotations.libcrowds.com/annotations/ Response: { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/ , label : All collections , total : 3 , type : [ AnnotationCollection , BasicContainer ], items : [ { created : 2018-05-18T00:04:15Z , creator : https://www.libcrowds.com/api/category/22 , generated : 2018-05-20T22:05:15Z , id : https://annotations.libcrowds.com/annotations/playbills-tags/ , label : Playbills Image Tags , total : 12 , type : [ AnnotationCollection , BasicContainer ] }, { created : 2018-05-18T00:04:37Z , creator : https://www.libcrowds.com/api/category/22 , generated : 2018-05-20T22:05:17Z , id : https://annotations.libcrowds.com/annotations/playbills-results/ , label : Playbills Results , total : 11926 , type : [ AnnotationCollection , BasicContainer ] } ] }","title":"List all Annotation Collections"},{"location":"data/api/#get-an-annotation-collection","text":"GET https://annotations.libcrowds.com/annotations/ collection_id / Example Request: GET https : // annotations . libcrowds . com / annotations / playbills - results / Response: { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/ , label : Playbills Results , total : 11926 , generated : 2018-05-20T22:12:03Z , type : [ AnnotationCollection , BasicContainer ], first : { id : https://annotations.libcrowds.com/annotations/playbills-results/?page=0 , items : [ { id : https://annotations.libcrowds.com/annotations/playbills-results/963ebbaa-4602-4ea5-8a4e-3ad7fde23611/ , motivation : describing , type : Annotation , body : [ { format : text/plain , purpose : describing , type : TextualBody , value : 1816-01-27 }, { purpose : tagging , type : TextualBody , value : date } ], created : 2018-05-20T19:15:31Z , generated : 2018-05-20T22:12:03Z , generator : [ { homepage : https://www.libcrowds.com , id : https://github.com/LibCrowds/libcrowds , name : LibCrowds , type : Software }, { id : https://backend.libcrowds.com/api/task/82346 , type : Software } ], target : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589024.0x000285 }, ... ] }, last : https://annotations.libcrowds.com/annotations/playbills-results/?page=12 , }","title":"Get an Annotation Collection"},{"location":"data/api/#annotation-pages","text":"As an Annotation Collection could grow very large Annotations are paginated using Annotation Pages, which can be traversed by following the next and prev links between pages.","title":"Annotation Pages"},{"location":"data/api/#get-an-annotationpage","text":"GET https://annotations.libcrowds.com/annotations/ collection_id /?page=0 Example Request: GET https : // annotations . libcrowds . com / annotations / playbills - results /? page = 0 Response: { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/?page=0 , type : AnnotationPage , items : [ { id : https://annotations.libcrowds.com/annotations/playbills-results/963ebbaa-4602-4ea5-8a4e-3ad7fde23611/ , motivation : describing , type : Annotation , body : [ { format : text/plain , purpose : describing , type : TextualBody , value : 1816-01-27 }, { purpose : tagging , type : TextualBody , value : date } ], created : 2018-05-20T19:15:31Z , generated : 2018-05-20T22:12:03Z , generator : [ { homepage : https://www.libcrowds.com , id : https://github.com/LibCrowds/libcrowds , name : LibCrowds , type : Software }, { id : https://backend.libcrowds.com/api/task/82346 , type : Software } ], target : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589024.0x000285 }, ... ], startIndex : 0 , partOf : { created : 2018-05-18T00:04:37Z , creator : https://www.libcrowds.com/api/category/22 , generated : 2018-05-20T22:26:39Z , id : https://annotations.libcrowds.com/annotations/playbills-results/ , label : Playbills Results , total : 12744 , type : [ AnnotationCollection , BasicContainer ] }, next : https://annotations.libcrowds.com/annotations/playbills-results/?page=1 }","title":"Get an AnnotationPage"},{"location":"data/api/#annotations","text":"Each Annotation has a Body, which is a comment or other descriptive resource, and a Target that the Body is somehow \"about\". See the Data Model for further details.","title":"Annotations"},{"location":"data/api/#get-an-annotation","text":"GET https://annotations.libcrowds.com/annotations/ collection_id / annotation_id / Example Request: GET https : // annotations . libcrowds . com / annotations / playbills - results / 963 ebbaa - 4602 - 4 ea5 - 8 a4e - 3 ad7fde23611 / Response: { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/963ebbaa-4602-4ea5-8a4e-3ad7fde23611/ , motivation : describing , type : Annotation , body : [ { format : text/plain , purpose : describing , type : TextualBody , value : 1816-01-27 }, { purpose : tagging , type : TextualBody , value : date } ], created : 2018-05-20T19:15:31Z , generated : 2018-05-20T22:12:03Z , generator : [ { homepage : https://www.libcrowds.com , id : https://github.com/LibCrowds/libcrowds , name : LibCrowds , type : Software }, { id : https://backend.libcrowds.com/api/task/82346 , type : Software } ], target : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589024.0x000285 }","title":"Get an Annotation"},{"location":"data/api/#search","text":"A search service for Annotations is provided at the following endpoint: GET https : // annotations . libcrowds . com / search / The query parameters accepted by this search service are listed below.","title":"Search"},{"location":"data/api/#contains","text":"Search for Annotations that contain the given value. Example Request: GET https : // annotations . libcrowds . com / search /? contains = { motivation : describing }","title":"contains"},{"location":"data/api/#fts","text":"Full text search... Example Request: GET https : // annotations . libcrowds . com / search /? fts = body :: Merchant : *","title":"fts"},{"location":"data/api/#export","text":"Collections can be exported for offline analysis or migration purposes via the following endpoint: GET https : // annotations . libcrowds . com / export / collection_id /? zip = 1 Note that without the zip parameter the entire Annotation Collection will be streamed. This is useful for exporting to a file programatically but may take a long time to complete if run in a browser! Here's an example of using this endpoint to download data to a JSON file: curl https://annotations.libcrowds.com/export/playbills-tags test.json","title":"Export"},{"location":"data/downloads/","text":"All task-related data can be downloaded via the Data page of each collection microsite. The available download types are described below. Note that everything contained in these datasets is also available via the API . Depending on the objective, the API may provide a more suitable method of access. Annotation downloads These datasets contain exports from the Annotation Server, which is used to store all final results generated by the platform along with additional information, such as user-generated tags. See the data model for details of how the different Annotation types are structured. The available datasets are: Results: The Annotations produced following the results analysis processes. Tags: The user-generated tags for each item. Project downloads This is the raw data used by or generated via the platform. The downloads are available in JSON and CSV formats. However, as this data may contain a lot of nested fields the JSON versions are likely to be more usable. There are three types of dataset available for each project: Tasks: The data used to configure tasks and present them to users. Contributions: The user-submitted data provided as answers to each task. Results: The final results produced during the results analysis processes.","title":"Downloads"},{"location":"data/downloads/#annotation-downloads","text":"These datasets contain exports from the Annotation Server, which is used to store all final results generated by the platform along with additional information, such as user-generated tags. See the data model for details of how the different Annotation types are structured. The available datasets are: Results: The Annotations produced following the results analysis processes. Tags: The user-generated tags for each item.","title":"Annotation downloads"},{"location":"data/downloads/#project-downloads","text":"This is the raw data used by or generated via the platform. The downloads are available in JSON and CSV formats. However, as this data may contain a lot of nested fields the JSON versions are likely to be more usable. There are three types of dataset available for each project: Tasks: The data used to configure tasks and present them to users. Contributions: The user-submitted data provided as answers to each task. Results: The final results produced during the results analysis processes.","title":"Project downloads"},{"location":"data/introduction/","text":"All task-related data stored on the LibCrowds platform is made publically available for further research or integration into other systems. There are several ways of accessing this data, which are described further below. Data model In the majority of cases, the final result data is likely to be the most useful. This is the data produced once a task has been completed and all contributions analysed. In their raw form, these final results are serialised according to the Web Annotatations data model and wrapped with additional information about the tasks that produced them. See the Data Model section for more details. Downloads All task and contribution data is made available for direct download in CSV and JSON formats. The structure of each dataset varies according to its purpose. For example, the task datasets contain information required to configure each task, whereas the contribution datasets contain the information submitted as answers to those tasks. See the Downloads section for more details. Python examples in Jupyter Notebooks These Notebooks provide another way to explore and create simple visualisations of LibCrowds data . API A range of API endpoints are provided to further transform these datasets. For instance, the final results data can be retrived as Annotation Lists that can be consumed by IIIF compatible image viewers. See the API section for more details. To find out how the data is structured see the Data Model guide. To find out how to download the data in JSON or CSV formats see the Downloads guide. To find out how to consume the data programatically, see the API guide.","title":"Introduction"},{"location":"data/introduction/#data-model","text":"In the majority of cases, the final result data is likely to be the most useful. This is the data produced once a task has been completed and all contributions analysed. In their raw form, these final results are serialised according to the Web Annotatations data model and wrapped with additional information about the tasks that produced them. See the Data Model section for more details.","title":"Data model"},{"location":"data/introduction/#downloads","text":"All task and contribution data is made available for direct download in CSV and JSON formats. The structure of each dataset varies according to its purpose. For example, the task datasets contain information required to configure each task, whereas the contribution datasets contain the information submitted as answers to those tasks. See the Downloads section for more details.","title":"Downloads"},{"location":"data/introduction/#python-examples-in-jupyter-notebooks","text":"These Notebooks provide another way to explore and create simple visualisations of LibCrowds data .","title":"Python examples in Jupyter Notebooks"},{"location":"data/introduction/#api","text":"A range of API endpoints are provided to further transform these datasets. For instance, the final results data can be retrived as Annotation Lists that can be consumed by IIIF compatible image viewers. See the API section for more details. To find out how the data is structured see the Data Model guide. To find out how to download the data in JSON or CSV formats see the Downloads guide. To find out how to consume the data programatically, see the API guide.","title":"API"},{"location":"data/model/","text":"The final results for all LibCrowds are stored as Web Annotations. Web Annotations became a W3C standard on the 23rd February, 2017. The Web Annotation Data Model provides the following abstract: Annotations are typically used to convey information about a resource or associations between resources. Simple examples include a comment or tag on a single web page or image, or a blog post about a news article. The Web Annotation Data Model specification describes a structured model and format to enable annotations to be shared and reused across different hardware and software platforms. Common use cases can be modeled in a manner that is simple and convenient, while at the same time enabling more complex requirements, including linking arbitrary content to a particular data point or to segments of timed multimedia resources. The specification provides a specific JSON format for ease of creation and consumption of annotations based on the conceptual model that accommodates these use cases, and the vocabulary of terms that represents it. By using this structure for our final results we aim to make the crowdsourced data generated via the platform more easily reusable online and provide a way for researchers to answer specific questions via programmatic means (see the API section for details). As we as the final results data, we use Web Annotations to store additional user-generated data, such as image tags. The various types of annotation are described further below. Result Annotations These annotations are created once a task is completed and all related contributions analysed (see the Results Analysis section for details). Each annotation contains a motivation, which provides an indication of why it was created. The types of result Annotations produced by LibCrowds are described below. Tagging Tagging annotations are used to associate a tag with a specific target, such as a region of an image. For example, this type of annotation would be used in a IIIF Annotation project designed to mark up all of the titles on a page. Example tagging annotation { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/ce67281d-5b2a-4bdc-ba33-cb46525d0625 , type : Annotation , motivation : tagging , created : 2017-08-31T04:25:28.178Z , generated : 2017-08-31T04:25:28.178Z , generator : [ { id : https://github.com/LibCrowds/libcrowds , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, { id : https://backend.libcrowds.com/api/task/42 , type : Software } ], body : { type : TextualBody , purpose : tagging , value : title }, target : { source : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x00007f , selector : { conformsTo : http://www.w3.org/TR/media-frags/ , type : FragmentSelector , value : ?xywh=245,1172,1789,270 } } } Describing Describing annotations are used for any user input that can be stored as text, such as transcriptions. For example, this type of annotation would be used in a IIIF Annotation project designed to transcribe all of the titles on a page. Example describing annotation { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/7640ddcd-6e48-4a9c-a360-3383032593b6 , type : Annotation , motivation : describing , created : 018-02-08T22:15:07.152Z , generated : 018-02-08T22:15:07.152Z , generator : [ { id : https://github.com/LibCrowds/libcrowds , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, { id : https://backend.libcrowds.com/api/task/42 , type : Software } ], body : [ { type : TextualBody , purpose : tagging , value : title } { type : TextualBody , purpose : describing , value : King Lear , format : text/plain } ], target : { source : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589096.0x0002b7 , selector : { conformsTo : http://www.w3.org/TR/media-frags/ , type : FragmentSelector , value : ?xywh=7,1191,1962,359 } } } Commenting Commenting annotations are used to store comments about a target. For example, this type of annotation would be used to store any user-input provided via the notes field of a IIIF Annotation project. Example commenting annotation { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/97b63351-c1a4-456e-8871-b299aa684639 , type : Annotation , motivation : commenting , created : 2017-09-05T11:07:32.273Z , creator : { id : https://www.libcrowds.com/api/user/1 , type : Person , name : Joe Bloggs , nickname : joebloggs }, generated : 2017-09-05T11:07:32.273Z , generator : [ { id : https://github.com/LibCrowds/libcrowds , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, { id : https://backend.libcrowds.com/api/task/42 , type : Software } ], body : { type : TextualBody , purpose : commenting , value : Not a playbill , format : text/plain }, target : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x000094 } Image Tag Annotations As the title suggests, image tag annotations are used to associated a tag with an image. All image tag annotations are generated with the tagging motivation. Tagging Tagging annotations are used to associate a tag with an image. They contain enough data for them to later be used to build an image album, or potentially a IIIF manifest. The target's source contains a the image URI and the target's scope contains the IIIF manifest URI, if available. If a IIIF manifest URI was not available at the time of tagging (e.g. if the image being tagged was from another source, such as Flickr) then the target will contain only the URI of the image. Example tagging annotation { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-image-tags/ce67281d-5b2a-4bdc-ba33-cb46525d0625 , type : Annotation , motivation : tagging , created : 2017-08-31T04:25:28.178Z , creator : { id : https://www.libcrowds.com/api/user/1 , type : Person , name : Joe Bloggs , nickname : joebloggs }, generated : 2017-08-31T04:25:28.178Z , generator : { id : https://www.libcrowds.com , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, body : { type : TextualBody , purpose : tagging , value : foo }, target : { scope : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589060.0x000002/manifest.json , source : { id : https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589059.0x00004b/full/max/0/default.jpg } }, } Full model The following tables detail how the LibCrowds platform implements Web Annotations. Property Type Description @context String The JSON-LD context (always http://www.w3.org/ns/anno.jsonld ) id String An IRI where the Web Annotation can be retrieved type String The class for Web Annotations (always 'Annotation') motivation String The relationship between the Annotation and a Motivation created String The time at which the Annotation was created creator Object The creator of the Annotation generated String The time at which the Annotation serialization was generated generator String or Object The agent responsible for generating the serialization of the Annotation (typically software) modified String The time at which the Annotation was modified, after its creation target String or Object The target of the Annotation body List or Object The relationship between the Annotation and its Body creator The creator contains information about the person that created the annotation. This is currently only used for commenting annotations, which are created by a single authenticated user. Property Type Description id String An IRI that identifies the person type String The type of the creator (always 'Person') name String The full name of the person nickname String The nickname of the person Example of a creator { id : https://www.libcrowds.com/api/user/1 , type : Person , name : Joe Bloggs , nickname : joebloggs } generator The generator contains information about the software used to generated the annotation, which in this case is LibCrowds. For results Annotations, a second generator is added to identify the result to which the Annotation is linked. Property Type Description id String An IRI that identifies the software (always main LibCrowds GitHub repository ) type String The type of the generator (always 'Software') name String The name of the generator (always 'LibCrowds') homepage String The base URL that the software was running from when the annotation was generated Example of a generator [ { id : https://github.com/LibCrowds/libcrowds , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, { id : https://backend.libcrowds.com/api/task/42 , type : Software } ] target The target identifies the resource being annotated. For instance, this may be an image, in which case the target will be a URL. Or, the target may be a specific region of an image, in which case the target will be an object with the properties below. Property Type Description source String or Object The URL of the resource being annotated selector Object The relationship between the resource and a selector selector.type String The class of the selector (always 'FragmentSelector') selector.conformsTo String The fragment selector syntax IRI (always http://www.w3.org/TR/media-frags/ ) selector.value String The contents of the fragment component scope String A resource that provides the scope for the context of an Annotation Example of a media fragment target { target : { source : http://example.org/iiif/book1/canvas/p1 , selector : { type : FragmentSelector , conformsTo : http://www.w3.org/TR/media-frags/ , value : xywh=100,100,100,100 } }, ... } body The body contains information that describes the target, for example, a tag or a transcription. Tags Tags are used to associate some label, generally as plain text, with the target. Property Type Description type String The type of the resource (always 'TextualBody') purpose String The reason for the inclusion (always 'tagging') value String The tag text Example of a tag { type : TextualBody , purpose : tagging , value : title } Semantic Tags Semantic Tags are used to link the annotation to a URI that identifies a specific resource. Property Type Description type String The type of the resource (always 'SpecificResource') purpose String The reason for the inclusion (always 'classifying') source String A URI identifying the specific resource Example of a semantic tag { type : SpecificResource , purpose : classifying , source : http://purl.org/dc/terms/title } Descriptions Descriptions are used to describe the target in plain text. Property Type Description type String The type of the resource (always 'TextualBody') purpose String The reason for the inclusion (always 'describing') format String The format of the description (always 'text/plain') value String The description text Example of a description { type : TextualBody , purpose : describing , format : text/plain , value : The Merchant of Venice } For details on how to query the Annotations see the API documentation .","title":"Data Model"},{"location":"data/model/#result-annotations","text":"These annotations are created once a task is completed and all related contributions analysed (see the Results Analysis section for details). Each annotation contains a motivation, which provides an indication of why it was created. The types of result Annotations produced by LibCrowds are described below.","title":"Result Annotations"},{"location":"data/model/#tagging","text":"Tagging annotations are used to associate a tag with a specific target, such as a region of an image. For example, this type of annotation would be used in a IIIF Annotation project designed to mark up all of the titles on a page. Example tagging annotation { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/ce67281d-5b2a-4bdc-ba33-cb46525d0625 , type : Annotation , motivation : tagging , created : 2017-08-31T04:25:28.178Z , generated : 2017-08-31T04:25:28.178Z , generator : [ { id : https://github.com/LibCrowds/libcrowds , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, { id : https://backend.libcrowds.com/api/task/42 , type : Software } ], body : { type : TextualBody , purpose : tagging , value : title }, target : { source : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x00007f , selector : { conformsTo : http://www.w3.org/TR/media-frags/ , type : FragmentSelector , value : ?xywh=245,1172,1789,270 } } }","title":"Tagging"},{"location":"data/model/#describing","text":"Describing annotations are used for any user input that can be stored as text, such as transcriptions. For example, this type of annotation would be used in a IIIF Annotation project designed to transcribe all of the titles on a page. Example describing annotation { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/7640ddcd-6e48-4a9c-a360-3383032593b6 , type : Annotation , motivation : describing , created : 018-02-08T22:15:07.152Z , generated : 018-02-08T22:15:07.152Z , generator : [ { id : https://github.com/LibCrowds/libcrowds , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, { id : https://backend.libcrowds.com/api/task/42 , type : Software } ], body : [ { type : TextualBody , purpose : tagging , value : title } { type : TextualBody , purpose : describing , value : King Lear , format : text/plain } ], target : { source : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589096.0x0002b7 , selector : { conformsTo : http://www.w3.org/TR/media-frags/ , type : FragmentSelector , value : ?xywh=7,1191,1962,359 } } }","title":"Describing"},{"location":"data/model/#commenting","text":"Commenting annotations are used to store comments about a target. For example, this type of annotation would be used to store any user-input provided via the notes field of a IIIF Annotation project. Example commenting annotation { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-results/97b63351-c1a4-456e-8871-b299aa684639 , type : Annotation , motivation : commenting , created : 2017-09-05T11:07:32.273Z , creator : { id : https://www.libcrowds.com/api/user/1 , type : Person , name : Joe Bloggs , nickname : joebloggs }, generated : 2017-09-05T11:07:32.273Z , generator : [ { id : https://github.com/LibCrowds/libcrowds , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, { id : https://backend.libcrowds.com/api/task/42 , type : Software } ], body : { type : TextualBody , purpose : commenting , value : Not a playbill , format : text/plain }, target : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589158.0x000094 }","title":"Commenting"},{"location":"data/model/#image-tag-annotations","text":"As the title suggests, image tag annotations are used to associated a tag with an image. All image tag annotations are generated with the tagging motivation.","title":"Image Tag Annotations"},{"location":"data/model/#tagging_1","text":"Tagging annotations are used to associate a tag with an image. They contain enough data for them to later be used to build an image album, or potentially a IIIF manifest. The target's source contains a the image URI and the target's scope contains the IIIF manifest URI, if available. If a IIIF manifest URI was not available at the time of tagging (e.g. if the image being tagged was from another source, such as Flickr) then the target will contain only the URI of the image. Example tagging annotation { @context : http://www.w3.org/ns/anno.jsonld , id : https://annotations.libcrowds.com/annotations/playbills-image-tags/ce67281d-5b2a-4bdc-ba33-cb46525d0625 , type : Annotation , motivation : tagging , created : 2017-08-31T04:25:28.178Z , creator : { id : https://www.libcrowds.com/api/user/1 , type : Person , name : Joe Bloggs , nickname : joebloggs }, generated : 2017-08-31T04:25:28.178Z , generator : { id : https://www.libcrowds.com , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, body : { type : TextualBody , purpose : tagging , value : foo }, target : { scope : https://api.bl.uk/metadata/iiif/ark:/81055/vdc_100022589060.0x000002/manifest.json , source : { id : https://api.bl.uk/image/iiif/ark:/81055/vdc_100022589059.0x00004b/full/max/0/default.jpg } }, }","title":"Tagging"},{"location":"data/model/#full-model","text":"The following tables detail how the LibCrowds platform implements Web Annotations. Property Type Description @context String The JSON-LD context (always http://www.w3.org/ns/anno.jsonld ) id String An IRI where the Web Annotation can be retrieved type String The class for Web Annotations (always 'Annotation') motivation String The relationship between the Annotation and a Motivation created String The time at which the Annotation was created creator Object The creator of the Annotation generated String The time at which the Annotation serialization was generated generator String or Object The agent responsible for generating the serialization of the Annotation (typically software) modified String The time at which the Annotation was modified, after its creation target String or Object The target of the Annotation body List or Object The relationship between the Annotation and its Body","title":"Full model"},{"location":"data/model/#creator","text":"The creator contains information about the person that created the annotation. This is currently only used for commenting annotations, which are created by a single authenticated user. Property Type Description id String An IRI that identifies the person type String The type of the creator (always 'Person') name String The full name of the person nickname String The nickname of the person Example of a creator { id : https://www.libcrowds.com/api/user/1 , type : Person , name : Joe Bloggs , nickname : joebloggs }","title":"creator"},{"location":"data/model/#generator","text":"The generator contains information about the software used to generated the annotation, which in this case is LibCrowds. For results Annotations, a second generator is added to identify the result to which the Annotation is linked. Property Type Description id String An IRI that identifies the software (always main LibCrowds GitHub repository ) type String The type of the generator (always 'Software') name String The name of the generator (always 'LibCrowds') homepage String The base URL that the software was running from when the annotation was generated Example of a generator [ { id : https://github.com/LibCrowds/libcrowds , type : Software , name : LibCrowds , homepage : https://www.libcrowds.com }, { id : https://backend.libcrowds.com/api/task/42 , type : Software } ]","title":"generator"},{"location":"data/model/#target","text":"The target identifies the resource being annotated. For instance, this may be an image, in which case the target will be a URL. Or, the target may be a specific region of an image, in which case the target will be an object with the properties below. Property Type Description source String or Object The URL of the resource being annotated selector Object The relationship between the resource and a selector selector.type String The class of the selector (always 'FragmentSelector') selector.conformsTo String The fragment selector syntax IRI (always http://www.w3.org/TR/media-frags/ ) selector.value String The contents of the fragment component scope String A resource that provides the scope for the context of an Annotation Example of a media fragment target { target : { source : http://example.org/iiif/book1/canvas/p1 , selector : { type : FragmentSelector , conformsTo : http://www.w3.org/TR/media-frags/ , value : xywh=100,100,100,100 } }, ... }","title":"target"},{"location":"data/model/#body","text":"The body contains information that describes the target, for example, a tag or a transcription.","title":"body"},{"location":"data/model/#tags","text":"Tags are used to associate some label, generally as plain text, with the target. Property Type Description type String The type of the resource (always 'TextualBody') purpose String The reason for the inclusion (always 'tagging') value String The tag text Example of a tag { type : TextualBody , purpose : tagging , value : title }","title":"Tags"},{"location":"data/model/#semantic-tags","text":"Semantic Tags are used to link the annotation to a URI that identifies a specific resource. Property Type Description type String The type of the resource (always 'SpecificResource') purpose String The reason for the inclusion (always 'classifying') source String A URI identifying the specific resource Example of a semantic tag { type : SpecificResource , purpose : classifying , source : http://purl.org/dc/terms/title }","title":"Semantic Tags"},{"location":"data/model/#descriptions","text":"Descriptions are used to describe the target in plain text. Property Type Description type String The type of the resource (always 'TextualBody') purpose String The reason for the inclusion (always 'describing') format String The format of the description (always 'text/plain') value String The description text Example of a description { type : TextualBody , purpose : describing , format : text/plain , value : The Merchant of Venice } For details on how to query the Annotations see the API documentation .","title":"Descriptions"},{"location":"lctemplates/analysis/","text":"As each task is completed an analysis process is run that compares all contributions for that task and, based on the outcome, either sets a final result or sends the task back for an additional contribution. Before the contributions are compared a set of normalisation rules can be applied. This rules can be configured via this section. For more details of how the results analysis process works, see the Results Analysis section. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Template . Locate the template in the table and click Open . Select Analysis from the main menu. A screenshot of a template's analysis admin page Updating normalisation rules The available normalisation rules include things such as whitespace handling, case conversion and trimming of punctuation. Hints underneath each option expain their purpose. Edit the normalisation options by modifying the form and clicking Update .","title":"Analysis"},{"location":"lctemplates/analysis/#updating-normalisation-rules","text":"The available normalisation rules include things such as whitespace handling, case conversion and trimming of punctuation. Hints underneath each option expain their purpose. Edit the normalisation options by modifying the form and clicking Update .","title":"Updating normalisation rules"},{"location":"lctemplates/delete/","text":"It is possible to delete templates that have not yet been approved. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Template . Locate the template in the table and click Open . Select Delete from the main menu. A screenshot of a template's delete admin page Deleting a template To delete the template, click the Delete button.","title":"Delete"},{"location":"lctemplates/delete/#deleting-a-template","text":"To delete the template, click the Delete button.","title":"Deleting a template"},{"location":"lctemplates/details/","text":"Core details for the template can be updated via this section. This includes the name and description of the template. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Template . Locate the template in the table and click Open . Select Core Details from the main menu. A screenshot of the template details admin page Updating the template metadata The template name will form part of the name of any projects generated using the template. The description will be used as the project description. Modify these settings by updating the form fields and clicking the Update button.","title":"Core Details"},{"location":"lctemplates/details/#updating-the-template-metadata","text":"The template name will form part of the name of any projects generated using the template. The description will be used as the project description. Modify these settings by updating the form fields and clicking the Update button.","title":"Updating the template metadata"},{"location":"lctemplates/introduction/","text":"Templates contain all of the configuration details used to generate projects. This includes a project description, the task details, a tutorial for volunteers and rules about results analysis. Who can create templates? Templates can be created by LibCrowds administrators. See the New Template guide to find out how to create a template.","title":"Introduction"},{"location":"lctemplates/introduction/#who-can-create-templates","text":"Templates can be created by LibCrowds administrators. See the New Template guide to find out how to create a template.","title":"Who can create templates?"},{"location":"lctemplates/new/","text":"Project templates contain all of the task configuration details used to generate projects. Each template can be used to generate a project for all available volumes for a collection microsite, without having to redefine the settings each time. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select New Template . A screenshot of the new template page Creating a template Create a template by choosing a collection, a name and a description, then clicking Create . After creation you will be given access to futher options to help design the task, set filters, a tutorial and set the rules for results analysis. See the Task section for guidance on how to configure the template's task.","title":"New Template"},{"location":"lctemplates/new/#creating-a-template","text":"Create a template by choosing a collection, a name and a description, then clicking Create . After creation you will be given access to futher options to help design the task, set filters, a tutorial and set the rules for results analysis. See the Task section for guidance on how to configure the template's task.","title":"Creating a template"},{"location":"lctemplates/parent/","text":"Parent-child relationships between templates can be configured via this section. This option is useful for creating chains of projects where the tasks that need to be created for one project rely on the results of another. For example, you might want to create two project types, one to mark up the titles in a set of images and another to transcribe them. In this case, the marking up project would be the parent and the transcription project would be the child. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Template . Locate the template in the table and click Open . Select Parent from the main menu. A screenshot of a template's parent admin page Updating the parent To update the parent template, select it from the dropdown list and click Update .","title":"Parent"},{"location":"lctemplates/parent/#updating-the-parent","text":"To update the parent template, select it from the dropdown list and click Update .","title":"Updating the parent"},{"location":"lctemplates/redundancy/","text":"The redundancy settings for all tasks created from a template can be configured via this section. These settings determine when a task is considered complete. Result analysis will first be triggered once the minimum number of contributions have been made. If the task type determines that a number of contributions must match, before a final result is created, then contributions will continue to be collected until that minimum number of matches is established, or the maximum number of contributions is reached. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Template . Locate the template in the table and click Open . Select Redundancy from the main menu. A screenshot of a template's redundancy admin page Updating the redundancy To update the redundancy for all ongoing or future tasks generated from this template, modify the form and click Update .","title":"Redundancy"},{"location":"lctemplates/redundancy/#updating-the-redundancy","text":"To update the redundancy for all ongoing or future tasks generated from this template, modify the form and click Update .","title":"Updating the redundancy"},{"location":"lctemplates/task/","text":"The task configuration determines how a task is presented to volunteers and how results are collected. The task can be configured via this section. The options shown will vary depending on the type of task presenter chosen for the collection, for example, IIIF or Z3950 . Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Template . Locate the template in the table and click Open . Select Task from the main menu. A screenshot of a template's task admin page Configuring IIIF tasks TODO: write this Configuring Z39.50 tasks TODO: write this","title":"Task"},{"location":"lctemplates/task/#configuring-iiif-tasks","text":"TODO: write this","title":"Configuring IIIF tasks"},{"location":"lctemplates/task/#configuring-z3950-tasks","text":"TODO: write this","title":"Configuring Z39.50 tasks"},{"location":"lctemplates/tutorial/","text":"Tutorials are displayed when a project is first loaded and give volunteers some additional guidance about how to contribute. The tutorials for all projects generated from a template can be modified via this section. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Template . Locate the template in the table and click Open . Select Tutorial from the main menu. A screenshot of a template's tutorial admin page Updating the tutorial Modify the tutorial content by using the Markdown editor, then clicking Update .","title":"Tutorial"},{"location":"lctemplates/tutorial/#updating-the-tutorial","text":"Modify the tutorial content by using the Markdown editor, then clicking Update .","title":"Updating the tutorial"},{"location":"projects/collection/","text":"Each project will appear on a single collection microsite. This is initially chosen during project creation but can be updated via this page (although this will rarely be necessary). Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Collection from the main menu. A screenshot of a project's collection admin page Updating the collection Update the collection microsite on which this project will appear by locating it in the table and clicking the associated Select button.","title":"Collection"},{"location":"projects/collection/#updating-the-collection","text":"Update the collection microsite on which this project will appear by locating it in the table and clicking the associated Select button.","title":"Updating the collection"},{"location":"projects/delete/","text":"It is possible to delete projects that have not yet produced any completed tasks. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Delete from the main menu. A screenshot of a project's delete admin page Deleting a project To delete the project, click the Delete button.","title":"Delete"},{"location":"projects/delete/#deleting-a-project","text":"To delete the project, click the Delete button.","title":"Deleting a project"},{"location":"projects/details/","text":"Core details for the project can be updated via this page. This includes the the name, shortname and description of the project. All of these settings will be generated during project creation and should not normally need to be changed. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Core Details from the main menu. A screenshot of the project details admin page Updating the project metadata The project name and description will appear on the project card shown on the collection microsite's main projects page. Modify the settings by updating the form fields and clicking the Update button. Restricting access By default, all users (registered and anonymous) will be able to contribute to the project. However, you can password protect the project, or restrict it to registered users, by editing the password field and toggles on this form and clicking Update .","title":"Core Details"},{"location":"projects/details/#updating-the-project-metadata","text":"The project name and description will appear on the project card shown on the collection microsite's main projects page. Modify the settings by updating the form fields and clicking the Update button.","title":"Updating the project metadata"},{"location":"projects/details/#restricting-access","text":"By default, all users (registered and anonymous) will be able to contribute to the project. However, you can password protect the project, or restrict it to registered users, by editing the password field and toggles on this form and clicking Update .","title":"Restricting access"},{"location":"projects/filters/","text":"Filters are used to help users more easily locate the types of project that they're interested in. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Filters from the main menu. A screenshot of a project filters admin page Projects can be filtered via the Sorting Options box on the collection microsite's main projects page. A screenshot of a collection microsite projects page Updating the filters A single value can be entered for each filter. As you type, values already being used by projects for that filter will be shown. It is preferable to choose existing filters where possible, but if no valid option is available you can type the value you need into the box and click on the entered value in the dropdown box. To save the changes, click Update . If you need a filter type that is not currently available please contact an administrator (you can use the email link at the bottom of the page).","title":"Filters"},{"location":"projects/filters/#updating-the-filters","text":"A single value can be entered for each filter. As you type, values already being used by projects for that filter will be shown. It is preferable to choose existing filters where possible, but if no valid option is available you can type the value you need into the box and click on the entered value in the dropdown box. To save the changes, click Update . If you need a filter type that is not currently available please contact an administrator (you can use the email link at the bottom of the page).","title":"Updating the filters"},{"location":"projects/introduction/","text":"A LibCrowds project encapsulates a set of similar tasks. For example, transcribing all of the dates shown on a set of images. This section contains guides that explain how to create and configure projects. Who can create projects? Projects can be created by all registered users. The final publication of all projects is subject to approval by LibCrowds administrators. Users can edit their own projects, or any where the owner has explicitly given them co-owner rights, whereas LibCrowds administrators retain the rights to edit all projects. By allowing all users to create projects, those particularly interested in identifying specific information not already being captured by the platform can setup projects to enable this. For example, a project could be designed to capture all of the ticket prices shown in a particular volume of digitised playbills. The resulting datasets will be made available for download via the platform. How are projects created? Projects are generated from templates that contain information used to configure the task and determine how the results are analysed. Creating these templates is probably the most complex stage of the process. Updating a template will effect all projects that use it Therefore, the creation and management of templates requires administrator rights. Once created, a template can be used to generate multiple projects of the same type. To follow on with the example above, a template designed to capture information about ticket prices could be reused to generate many projects, for a selection of volumes, without having to configure the task every time. How are volumes defined? Volumes provide the initial input for projects. For example, a volume could contain a link to a Flickr album or to a IIIF manifest. The volumes available for each collection microsite are maintained by LibCrowds administrators. See the New Project guide to find out how to generate a project from a template. If a template is not available for the type of project you want to create, visit the Templates section.","title":"Introduction"},{"location":"projects/introduction/#who-can-create-projects","text":"Projects can be created by all registered users. The final publication of all projects is subject to approval by LibCrowds administrators. Users can edit their own projects, or any where the owner has explicitly given them co-owner rights, whereas LibCrowds administrators retain the rights to edit all projects. By allowing all users to create projects, those particularly interested in identifying specific information not already being captured by the platform can setup projects to enable this. For example, a project could be designed to capture all of the ticket prices shown in a particular volume of digitised playbills. The resulting datasets will be made available for download via the platform.","title":"Who can create projects?"},{"location":"projects/introduction/#how-are-projects-created","text":"Projects are generated from templates that contain information used to configure the task and determine how the results are analysed. Creating these templates is probably the most complex stage of the process. Updating a template will effect all projects that use it Therefore, the creation and management of templates requires administrator rights. Once created, a template can be used to generate multiple projects of the same type. To follow on with the example above, a template designed to capture information about ticket prices could be reused to generate many projects, for a selection of volumes, without having to configure the task every time.","title":"How are projects created?"},{"location":"projects/introduction/#how-are-volumes-defined","text":"Volumes provide the initial input for projects. For example, a volume could contain a link to a Flickr album or to a IIIF manifest. The volumes available for each collection microsite are maintained by LibCrowds administrators. See the New Project guide to find out how to generate a project from a template. If a template is not available for the type of project you want to create, visit the Templates section.","title":"How are volumes defined?"},{"location":"projects/new/","text":"New projects are generated from a chosen volume and template via this section. Project templates provide all of the configuration details for a particular task. For example, a template might be created to transcribe all of the titles shown in an image. Volumes provide the input source for a project (e.g. the images). One project can be built for each combination of template and volume. Only the available volumes for the selected template will be shown. The available templates and volumes for each collection are maintained by LibCrowds administrators. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select New Project . A screenshot of the new project page Creating a project To create a new project, sign into your LibCrowds account and select New Projects from the main menu. Each project is associated with a single collection, so the first stage is to choose a collection by locating it in the list and clicking Select . You will be taken to a form with two dropdown options, Template and Volume . Select a template, which will load all available volumes for that template, then select a volume. Once the selections have been made, click Create . Adding filters Once the project is created you will be taken to the project filters page where you select filters to make the project easier to find. Unavailable volumes If a volume for a particular template is unavailable it is probably for one of the following reasons: It hasn't yet been loaded into the collection. The template needs to be built from a parent project, which is not yet complete. A project has already been built for that combination of template and volume. For further guidance, you can always contact an administrator by clicking the email link at the bottom of the page.","title":"New Project"},{"location":"projects/new/#creating-a-project","text":"To create a new project, sign into your LibCrowds account and select New Projects from the main menu. Each project is associated with a single collection, so the first stage is to choose a collection by locating it in the list and clicking Select . You will be taken to a form with two dropdown options, Template and Volume . Select a template, which will load all available volumes for that template, then select a volume. Once the selections have been made, click Create . Adding filters Once the project is created you will be taken to the project filters page where you select filters to make the project easier to find.","title":"Creating a project"},{"location":"projects/new/#unavailable-volumes","text":"If a volume for a particular template is unavailable it is probably for one of the following reasons: It hasn't yet been loaded into the collection. The template needs to be built from a parent project, which is not yet complete. A project has already been built for that combination of template and volume. For further guidance, you can always contact an administrator by clicking the email link at the bottom of the page.","title":"Unavailable volumes"},{"location":"projects/results/","text":"The results page lists all of the raw results data that has been generated for a project. It can be used to monitor the outcome of the automated results analysis process, or to trigger analysis for particular sets of tasks. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Results from the main menu. A screenshot of a project's results admin page Updating Results To update a single result, locate it in the table and click Analyse . To update all results for a project click the Analyse All button. This may be necessary in the unlikely event that the network failed when the result was first generated and before it was analysed, or if the platform's required plugins were not set up correctly.","title":"Results"},{"location":"projects/results/#updating-results","text":"To update a single result, locate it in the table and click Analyse . To update all results for a project click the Analyse All button. This may be necessary in the unlikely event that the network failed when the result was first generated and before it was analysed, or if the platform's required plugins were not set up correctly.","title":"Updating Results"},{"location":"projects/template/","text":"The template associated with a project will be set during project creation. However, on the rare occasion that it is necessary, the template can subsequently be changed via this section. Updating a project's template is risky, as it will affect the way in which the project's data is generated. Therefore, this page is restricted to users with administrator rights and should be used with caution. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Volume from the main menu. A screenshot of a project's template admin page Updating the template Update the project's template by locating it in the table and clicking the Select button.","title":"Template"},{"location":"projects/template/#updating-the-template","text":"Update the project's template by locating it in the table and clicking the Select button.","title":"Updating the template"},{"location":"projects/thumbnail/","text":"Project thumbnails are displayed on the project cards shown on the main projects page of a collection microsite. Thumbnails will be added automatically during project creation from whatever volume the project is generated from, but they can be changed here. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Thumbnail from the main menu. A screenshot of a project's thumbnail admin page Updating the thumbnail To update the thumbnail, select an image file by clicking on the file input field. Once you have selected an image you can use the preview area to zoom and crop the image. When you're happy with the selection, click the Update button. The thumbnail should be refreshed throughout the platform within a few minutes.","title":"Thumbnail"},{"location":"projects/thumbnail/#updating-the-thumbnail","text":"To update the thumbnail, select an image file by clicking on the file input field. Once you have selected an image you can use the preview area to zoom and crop the image. When you're happy with the selection, click the Update button. The thumbnail should be refreshed throughout the platform within a few minutes.","title":"Updating the thumbnail"},{"location":"projects/volume/","text":"The volume associated with a project will be set during project creation. However, on the rare occasion that it is necessary, the volume can subsequently be changed via this section. Updating a project's volume is risky, as it will affect the way in which the project's data is generated. Therefore, this page is restricted to users with administrator rights and should be used with caution. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Volume from the main menu. A screenshot of a project's volume admin page Updating the volume Update the project's volume by locating it in the table and clicking the Select or Deselect buttons. Note that the available volumes for a collection are set by administrators .","title":"Volume"},{"location":"projects/volume/#updating-the-volume","text":"Update the project's volume by locating it in the table and clicking the Select or Deselect buttons. Note that the available volumes for a collection are set by administrators .","title":"Updating the volume"},{"location":"projects/webhooks/","text":"Each time a task is completed a payload is sent to the URL specified here, triggering the results analysis process. This URL will be set automatically during project creation and it should not normally need to be changed. Therefore, access to this page is restricted to users with administrator rights. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Sign in to your LibCrowds account. Click the Menu button at the top of any page. Select Open Project . Locate the project in the table and click Open . Select Webhooks from the main menu. A screenshot of a project's webhooks admin page Updating the webhook Update the webhook by entering a URL and clicking the Update button.","title":"Webhooks"},{"location":"projects/webhooks/#updating-the-webhook","text":"Update the webhook by entering a URL and clicking the Update button.","title":"Updating the webhook"},{"location":"setup/configuring-explicates/","text":"This page details the core settings for the Explicates Web Annotation server. To edit them you can begin by copying the settings template: cd /path/to/libcrowds cp local.config.js.tmpl local.config.js Required settings The settings below are required for the application to run correctly. # ** IMPORTANT: Uncomment the lines below in production ** ENV = production SERVER_NAME = annotations.example.com # CORS settings (defaults below) # See https://flask-cors.readthedocs.io/en/latest/ CORS_RESOURCES = { r /* : { origins : * , allow_headers : [ Content-Type , Content-Length , Authorization , If-Match , Prefer , Accept , Slug ], max_age : 21600 , supports_credentials : True } } Tip See the Explicates settings template for details of all optional settings.","title":"Configuring Explicates"},{"location":"setup/configuring-explicates/#required-settings","text":"The settings below are required for the application to run correctly. # ** IMPORTANT: Uncomment the lines below in production ** ENV = production SERVER_NAME = annotations.example.com # CORS settings (defaults below) # See https://flask-cors.readthedocs.io/en/latest/ CORS_RESOURCES = { r /* : { origins : * , allow_headers : [ Content-Type , Content-Length , Authorization , If-Match , Prefer , Accept , Slug ], max_age : 21600 , supports_credentials : True } } Tip See the Explicates settings template for details of all optional settings.","title":"Required settings"},{"location":"setup/configuring-libcrowds/","text":"This page details all of the core LibCrowds settings. To edit them you can begin by copying the settings template: cd /path/to/libcrowds cp local.config.js.tmpl local.config.js Required Settings The following settings are all required for the application to run correctly. They are given defaults in the settings template but should be edited accordingly. annotations A server that complies with the Web Annotation Protocol is required to handle the storage and retrieval of user tags and results data. LibCrowds has been built for use with the Explicates server, which complies with the standard protocol and has the additional search functionality required for this application. The Setup section contains details on setting up an Annotation server, the base URL of which should then be added to the local settings file, as below. config . explicates = { baseURL : http://127.0.0.1:3000 } brand The name of the platform. config . brand = My Brand company The company responsible for the platform. config . company = My Company description An SEO optimised description of the platform. config . description : My SEO optimised meta description libcrowdsHost The host where this application will be deployed config . libcrowdsHost : http://127.0.0.1:8080 pybossaHost The host for all PYBOSSA API calls. config . pybossaHost : http://127.0.0.1:5000 tagline Some inspiring tagline. config . tagline : My inspiring tagline Optional Settings The following can be added to the configuration file to enable additional functionality. analytics Add Google Analytics to the platform by providing your tracking ID. config . analytics = { ua : UA-XXX-X } This will enable event tracking for the following events: Category Action Label Description Downloads {type}_{format} Project name or AnnotationCollection IRI Data file is downloaded Statistics view Project name Project statistics viewed Contributions {project name} Collection name Answer submitted Filters {filter value} Collection name Main projects list filtered Project Toolbar {name}_shown Collection name Project modal shown Tracking these events can help to determine the content that your users are most interested in. For example, monitoring the filters most used for a microsite can help determine the types of project that should be prioritised for release at a given time. Social interactions will be tracked using the social media 'Share' buttons present on the site. However, note that this reports button clicks and does not guarantee that the user actually then went ahead and shared the page. User IDs are used to track all registered and authenticated users. docs Provide a URL to the platform's documentation that will be linked to from the main footer and all admin dashboard pages. config . docs : http://docs.libcrowds.com If you want to use your own documentation site, please include the page structure found in the original documentation's mkdocs.yml file. This is beacuse many of these paths are linked to from specific LibCrowds admin pages. email Add a contact email address to the main footer. config . email = me@example.com facebook Add a Facebook app ID to enable Open Graph integration. config . facebook = { appId : 1234567890 } flarum Enable Flarum integration by adding the base url of the forum, a master apiKey , the sessionCookieDomain and a random string as the salt that is used to encrypt passwords. The flarum-ext-sso extension will also need to be installed for your Flarum instance and the API key created during this installation process should be used in the configuration below. config . flarum = { url : http://community.example.com , sessionCookieDomain : .example.com , apiKey : XXX-XXX-XXX , salt : super-secret-string , disableEmailConfirmation : true } Adding these settings will enable SSO and add the ability to link each collection microsite to a particular forum topic. Warning Beware that if SSO is enabled, then disabled, user's will not be able to access their forum accounts without resetting their passwords. footer Add an additional list menu to the main footer. config . footer = { title : Newsletter , items : [ { text : Sign up , url : http://mailchimp.signup.url } ] } github Add a GitHub link to the main footer. config . githubUrl = https://github.com/github https Force HTTPS for all external requests. config . https = true sentry Enable Sentry error tracking. config . sentry = { public_key : , private_key : , project_id : } social A list of social profile links to add to the site's structured metadata. config . social = [ http://www.facebook.com/your-profile , http://instagram.com/yourProfile , http://www.linkedin.com/in/yourprofile , http://plus.google.com/your_profile ] twitter Adds a twitter link to the main footer and enhances the platforms Twitter cards with twitter:site meta tag. config . twitter = mytwitterhandle disableProjectBuilder Disable project building functions for non-admin users. config . disableProjectBuilder = true","title":"Configuring LibCrowds"},{"location":"setup/configuring-libcrowds/#required-settings","text":"The following settings are all required for the application to run correctly. They are given defaults in the settings template but should be edited accordingly.","title":"Required Settings"},{"location":"setup/configuring-libcrowds/#annotations","text":"A server that complies with the Web Annotation Protocol is required to handle the storage and retrieval of user tags and results data. LibCrowds has been built for use with the Explicates server, which complies with the standard protocol and has the additional search functionality required for this application. The Setup section contains details on setting up an Annotation server, the base URL of which should then be added to the local settings file, as below. config . explicates = { baseURL : http://127.0.0.1:3000 }","title":"annotations"},{"location":"setup/configuring-libcrowds/#brand","text":"The name of the platform. config . brand = My Brand","title":"brand"},{"location":"setup/configuring-libcrowds/#company","text":"The company responsible for the platform. config . company = My Company","title":"company"},{"location":"setup/configuring-libcrowds/#description","text":"An SEO optimised description of the platform. config . description : My SEO optimised meta description","title":"description"},{"location":"setup/configuring-libcrowds/#libcrowdshost","text":"The host where this application will be deployed config . libcrowdsHost : http://127.0.0.1:8080","title":"libcrowdsHost"},{"location":"setup/configuring-libcrowds/#pybossahost","text":"The host for all PYBOSSA API calls. config . pybossaHost : http://127.0.0.1:5000","title":"pybossaHost"},{"location":"setup/configuring-libcrowds/#tagline","text":"Some inspiring tagline. config . tagline : My inspiring tagline","title":"tagline"},{"location":"setup/configuring-libcrowds/#optional-settings","text":"The following can be added to the configuration file to enable additional functionality.","title":"Optional Settings"},{"location":"setup/configuring-libcrowds/#analytics","text":"Add Google Analytics to the platform by providing your tracking ID. config . analytics = { ua : UA-XXX-X } This will enable event tracking for the following events: Category Action Label Description Downloads {type}_{format} Project name or AnnotationCollection IRI Data file is downloaded Statistics view Project name Project statistics viewed Contributions {project name} Collection name Answer submitted Filters {filter value} Collection name Main projects list filtered Project Toolbar {name}_shown Collection name Project modal shown Tracking these events can help to determine the content that your users are most interested in. For example, monitoring the filters most used for a microsite can help determine the types of project that should be prioritised for release at a given time. Social interactions will be tracked using the social media 'Share' buttons present on the site. However, note that this reports button clicks and does not guarantee that the user actually then went ahead and shared the page. User IDs are used to track all registered and authenticated users.","title":"analytics"},{"location":"setup/configuring-libcrowds/#docs","text":"Provide a URL to the platform's documentation that will be linked to from the main footer and all admin dashboard pages. config . docs : http://docs.libcrowds.com If you want to use your own documentation site, please include the page structure found in the original documentation's mkdocs.yml file. This is beacuse many of these paths are linked to from specific LibCrowds admin pages.","title":"docs"},{"location":"setup/configuring-libcrowds/#email","text":"Add a contact email address to the main footer. config . email = me@example.com","title":"email"},{"location":"setup/configuring-libcrowds/#facebook","text":"Add a Facebook app ID to enable Open Graph integration. config . facebook = { appId : 1234567890 }","title":"facebook"},{"location":"setup/configuring-libcrowds/#flarum","text":"Enable Flarum integration by adding the base url of the forum, a master apiKey , the sessionCookieDomain and a random string as the salt that is used to encrypt passwords. The flarum-ext-sso extension will also need to be installed for your Flarum instance and the API key created during this installation process should be used in the configuration below. config . flarum = { url : http://community.example.com , sessionCookieDomain : .example.com , apiKey : XXX-XXX-XXX , salt : super-secret-string , disableEmailConfirmation : true } Adding these settings will enable SSO and add the ability to link each collection microsite to a particular forum topic. Warning Beware that if SSO is enabled, then disabled, user's will not be able to access their forum accounts without resetting their passwords.","title":"flarum"},{"location":"setup/configuring-libcrowds/#footer","text":"Add an additional list menu to the main footer. config . footer = { title : Newsletter , items : [ { text : Sign up , url : http://mailchimp.signup.url } ] }","title":"footer"},{"location":"setup/configuring-libcrowds/#github","text":"Add a GitHub link to the main footer. config . githubUrl = https://github.com/github","title":"github"},{"location":"setup/configuring-libcrowds/#https","text":"Force HTTPS for all external requests. config . https = true","title":"https"},{"location":"setup/configuring-libcrowds/#sentry","text":"Enable Sentry error tracking. config . sentry = { public_key : , private_key : , project_id : }","title":"sentry"},{"location":"setup/configuring-libcrowds/#social","text":"A list of social profile links to add to the site's structured metadata. config . social = [ http://www.facebook.com/your-profile , http://instagram.com/yourProfile , http://www.linkedin.com/in/yourprofile , http://plus.google.com/your_profile ]","title":"social"},{"location":"setup/configuring-libcrowds/#twitter","text":"Adds a twitter link to the main footer and enhances the platforms Twitter cards with twitter:site meta tag. config . twitter = mytwitterhandle","title":"twitter"},{"location":"setup/configuring-libcrowds/#disableprojectbuilder","text":"Disable project building functions for non-admin users. config . disableProjectBuilder = true","title":"disableProjectBuilder"},{"location":"setup/configuring-pybossa/","text":"LibCrowds relies on a PYBOSSA backend that needs to be configured as follows. Required settings The settings below are all required for the application to run correctly and should be added to PYBOSSA's settings_local.py file. The following settings can be copied into your main configuration file directly: # Additional category fields CATEGORY_INFO_PUBLIC_FIELDS = [ tagline , background , license , presenter , forum , presenter_options , content , published , celebration , volumes , project_filters , templates , annotations ] # Additional user fields USER_INFO_PUBLIC_FIELDS = [ announcements , templates ] # Additional project fields PROJECT_INFO_PUBLIC_FIELDS = [ filters , template_id , volume_id ] # Avoid 404 errors when accessing URLs with or without a trailing slash STRICT_SLASHES = False # Allow projects to be published with no traditional task presenter DISABLE_TASK_PRESENTER = True These settings will need to be modified according to your environment, after copying them into your main configuration file: # Allow requests from LibCrowds # (modify the origins according to your environment) CORS_RESOURCES = { r /* : { origins : [ http://127.0.0.1:8080 ], allow_headers : [ Content-Type , Authorization , X-CSRFToken ], supports_credentials : True } } # Specify an SPA frontend SPA_SERVER_NAME = http://127.0.0.1:8080 # Allow the session cookie to be shared with any subdomain of mydomain.com SESSION_COOKIE_DOMAIN = mydomain.com # Flickr credentials (required for importing Z39.50 tasks) FLICKR_API_KEY = your-key FLICKR_SHARED_SECRET = your-secret # The following settings are used in emails sent from the server-side CONTACT_EMAIL = info@libcrowds.com BRAND = LibCrowds # Database details for Z39.50 projects Z3950_DATABASES = { loc : { host : z3950.loc.gov , db : Voyager , port : 7090 } } # The base URL of your Explicates annoation server WEB_ANNOTATION_BASE_URL = http://127.0.0.1:3000 Tip See the PYBOSSA documentation for details of all other available settings. If you're following on from the Local Installation or Deployment guides, you should now have a fully operational LibCrowds instance. To explore the core LibCrowds settings, see Configuring LibCrowds .","title":"Configuring PYBOSSA"},{"location":"setup/configuring-pybossa/#required-settings","text":"The settings below are all required for the application to run correctly and should be added to PYBOSSA's settings_local.py file. The following settings can be copied into your main configuration file directly: # Additional category fields CATEGORY_INFO_PUBLIC_FIELDS = [ tagline , background , license , presenter , forum , presenter_options , content , published , celebration , volumes , project_filters , templates , annotations ] # Additional user fields USER_INFO_PUBLIC_FIELDS = [ announcements , templates ] # Additional project fields PROJECT_INFO_PUBLIC_FIELDS = [ filters , template_id , volume_id ] # Avoid 404 errors when accessing URLs with or without a trailing slash STRICT_SLASHES = False # Allow projects to be published with no traditional task presenter DISABLE_TASK_PRESENTER = True These settings will need to be modified according to your environment, after copying them into your main configuration file: # Allow requests from LibCrowds # (modify the origins according to your environment) CORS_RESOURCES = { r /* : { origins : [ http://127.0.0.1:8080 ], allow_headers : [ Content-Type , Authorization , X-CSRFToken ], supports_credentials : True } } # Specify an SPA frontend SPA_SERVER_NAME = http://127.0.0.1:8080 # Allow the session cookie to be shared with any subdomain of mydomain.com SESSION_COOKIE_DOMAIN = mydomain.com # Flickr credentials (required for importing Z39.50 tasks) FLICKR_API_KEY = your-key FLICKR_SHARED_SECRET = your-secret # The following settings are used in emails sent from the server-side CONTACT_EMAIL = info@libcrowds.com BRAND = LibCrowds # Database details for Z39.50 projects Z3950_DATABASES = { loc : { host : z3950.loc.gov , db : Voyager , port : 7090 } } # The base URL of your Explicates annoation server WEB_ANNOTATION_BASE_URL = http://127.0.0.1:3000 Tip See the PYBOSSA documentation for details of all other available settings. If you're following on from the Local Installation or Deployment guides, you should now have a fully operational LibCrowds instance. To explore the core LibCrowds settings, see Configuring LibCrowds .","title":"Required settings"},{"location":"setup/deployment/","text":"This guide explains how to deploy an instance of LibCrowds to a set of servers with NGINX and supervisor. Three servers are required, one for LibCrowds, one for PYBOSSA and one for Explicates. The following page describes how to get all three set up. Domains Before we begin, it is important to note that both LibCrowds and PYBOSSA should be served from the same domain. This is because LibCrowds uses SSR, so the PYBOSSA session cookie needs to be shared with the LibCrowds server (rather than the client) and this will only work properly if both applications are served from the same domain. Subdomains are fine, so you can still run your applications on different servers. If you don't do this, the application will still run but, as it will not be possible to fully render certain pages on the server, you will see some strange behaviour with users appearing to not be signed in when the application first loads. You might also notice errors when attempting to navigate directly to restricted pages (such as the various administration dashboards). With that in mind, let's setup our servers. PYBOSSA Rather than replicating what has already been written, for details of how to deploy PYBOSSA see the PYBOSSA documentation . LibCrowds Starting with a fresh Ubuntu 16.04 server, run through the procedures below. Install Node.js and npm LibCrowds requires Node.js = 8.0.0 to run. Update and upgrade the package index: sudo apt-get update sudo apt-get upgrade Go to your home directory and retrieve the installation script: cd ~ curl -sL https://deb.nodesource.com/setup_8.x -o nodesource_setup.sh Run the script: sudo bash nodesource_setup.sh Install Node.js and the build-essential package: sudo apt-get install nodejs sudo apt-get install build-essential Install git LibCrowds is distributed under version control using git , install it by running: sudo apt-get install git-core Download and build LibCrowds Run the following commands to clone the LibCrowds repository into /var/www/libcrowds : mkdir /var/www git clone https://github.com/LibCrowds/libcrowds /var/www/libcrowds Enter the directory: cd /var/www/libcrowds Install LibCrowds' dependencies: npm install Copy the configuration template (see Configuring LibCrowds for details of how to edit this file): cp local.config.js.tmpl local.config.js Build the application: npm run build Tip If the installation or build process is getting killed before finishing it is possible that your server does not have enough memory. You may want to consider upgrading the server or adding some swap space. Setting up NGINX To serve the site using NGINX , first install it: sudo apt - get install nginx Remove the default server configuration: sudo rm -r /etc/nginx/sites-available/default sudo rm -r /etc/nginx/sites-enabled/default Edit a new server configuration file: vim /etc/nginx/sites-available/libcrowds Copy in the following and save the file: map $sent_http_content_type $expires { text/html epoch ; text/html ; charset=utf-8 epoch ; default off ; } server { listen 80 default_server ; listen [::]:80 default_server ; client_body_buffer_size 10K ; client_header_buffer_size 1k ; client_max_body_size 10m ; large_client_header_buffers 2 1k ; gzip on ; gzip_comp_level 2 ; gzip_types text/plain application/xml text/css application/javascript ; gzip_min_length 1000 ; gzip_proxied expired no-cache no-store private auth ; location / { expires $expires ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_read_timeout 1m ; proxy_connect_timeout 1m ; proxy_pass http://127.0.0.1:8080 ; } } Enable the LibCrowds configuration: ln -s /etc/nginx/sites-available/libcrowds /etc/nginx/sites-enabled/libcrowds Restart the server: sudo service nginx restart Setting Up Supervisor Supervisor is used to run LibCrowds in the background and restart it when the server boots up. sudo apt - get install supervisor Edit a new Supervisor program configuration: vim /etc/supervisor/conf.d/libcrowds.conf Copy in the following and save the file: [program:libcrowds] directory = /var/www/libcrowds command = npm run start autostart = true autorestart = true log_stdout = true log_stderr = true logfile = /var/log/libcrowds.log logfile_maxbytes = 10MB logfile_backups = 2 Restart supervisor: sudo service supervisor stop sudo service supervisor start Your LibCrowds server should now be running at http://your.domain.com . However, we still need to configure the Annotations server. Explicates Starting with a fresh Ubuntu 16.04 server, run through the procedures below. Install Python Explicates requires Python = 2.7 to run. Update and upgrade the package index: sudo apt-get update sudo apt-get upgrade Install Python: sudo apt install python Install some additional dependencies: sudo apt install python - virtualenv python - dev python - setuptools python - pip Install git Explicates is distributed under version control using git , install it by running: sudo apt-get install git-core Download and build Explicates Run the following commands to clone the Explicates repository into /var/www/explicates : mkdir /var/www git clone https://github.com/alexandermendes/explicates /var/www/explicates Enter the directory: cd /var/www/explicates Create and enter a virtual environment: virtualenv env source env/bin/activate Install Explicates: pip install -r requirements.txt Copy the configuration template (see Configuring Explicates for details of how to edit this file): cp settings.py.tmpl settings.py Important You will need to edit the SERVER_NAME setting now to point to the location of your server (e.g. annotations.example.com). It is required to build IDs outside of the request context and this is first done when the database is created below. Copy the alembic configuration template: cp alembic.ini.tmpl alembic.ini Seting up the database Explicates is backed by a PostgreSQL database. Install dependencies: sudo apt-get install postgresql postgresql-server-dev-all python-psycopg2 libpq-dev Add a database user: sudo -u postgres createuser -d -P explicates Enter the password tester when prompted. Info If you choose a different password you should also edit the database path in settings.py and alembic.ini . Create the database: sudo -u postgres createdb explicates -O explicates Populate the database: python /var/www/explicates/bin/db_create.py To check that everything has gone OK so far, you should now be able to type python run.py and see some messages that let you know the develpoment server is running (then press CTRL+C to quit). Setting up NGINX To setup NGINX , first install it: sudo apt - get install nginx Remove the default server configuration: sudo rm -r /etc/nginx/sites-available/default Edit a new server configuration file: vim /etc/nginx/sites-available/explicates Copy in the following and save the file: server { listen 80 default_server ; listen [::]:80 default_server ; # Change this to match your domain server_name annotations.example.com ; client_body_buffer_size 10K ; client_header_buffer_size 1k ; client_max_body_size 10m ; large_client_header_buffers 2 1k ; gzip on ; gzip_comp_level 2 ; gzip_types text/plain application/json application/ld+json ; gzip_min_length 1000 ; gzip_proxied expired no-cache no-store private auth ; location / { expires -1 ; include uwsgi_params ; uwsgi_pass unix:/tmp/explicates.sock ; } } Enable the Explicates configuration: ln -s /etc/nginx/sites-available/explicates /etc/nginx/sites-enabled/explicates Restart the NGINX server: sudo service nginx restart Setting up uWSGI To setup uWSGI , first install it: pip install -U uwsgi Edit a new server configuration file: vim /var/www/explicates/explicates.ini Copy in the following and save the file: [ uwsgi ] socket = /tmp/explicates.sock chmod-socket = 666 chdir = /var/www/explicates pythonpath = .. virtualenv = /var/www/explicates/env module = run:app cpu-affinity = 1 processes = 2 threads = 2 buffer-size = 65535 Setting Up Supervisor Supervisor is used to run Explicates in the background and restart it when the server boots up. sudo apt - get install supervisor Edit a new Supervisor program configuration: vim /etc/supervisor/conf.d/explicates.conf Copy in the following and save the file: [program:explicates] command = /var/www/explicates/env/bin/uwsgi /var/www/explicates/explicates.ini directory = /var/www/explicates autostart = true autorestart = true log_stdout = true log_stderr = true logfile = /var/log/explicates.log logfile_maxbytes = 10MB logfile_backups = 2 Restart supervisor: sudo service supervisor stop sudo service supervisor start Your Annotation server should now be running at http://your.domain.com . Security There are lots of potential steps that you could take to secure your servers. Running through all of the options here is outside the scope of this guide, but here are some quick wins for the LibCrowds and Explicates servers (details might need to be modified a bit for the PYBOSSA server). Firewall UFW, or Uncomplicated Firewall, is an easy way to manage a frontend firewall. Install it: sudo apt-get install ufw Deny incoming and allow outgoing by default: sudo ufw default deny incoming sudo ufw default allow outgoing Allow connections: sudo ufw allow ssh sudo ufw allow 22 /tcp Check the rules: ufw status You should see the following output: To Action From -- ------ ---- 22 ALLOW Anywhere 80 ALLOW Anywhere 443 ALLOW Anywhere 22 ( v6 ) ALLOW Anywhere ( v6 ) 80 ( v6 ) ALLOW Anywhere ( v6 ) 443 ( v6 ) ALLOW Anywhere ( v6 ) If the rules do indeed appear as above, enable the firewall: sudo ufw enable Secure Sockets Layer (SSL) Let's Encrypt provide free SSL certificates. Use the Certbot client to set them up for your operating system. After following the Certbot guide, above, you can setup a scheduled task to automatically renew the certificates. Edit a new daily task: vim /etc/cron.daily/certrenew Copy in the following and save the file: certbot renew Make the file executable: chmod +x /etc/cron.daily/certrenew Your certificate should now be checked for renewal daily. The next step is to install the required LibCrowds Plugins .","title":"Deployment"},{"location":"setup/deployment/#domains","text":"Before we begin, it is important to note that both LibCrowds and PYBOSSA should be served from the same domain. This is because LibCrowds uses SSR, so the PYBOSSA session cookie needs to be shared with the LibCrowds server (rather than the client) and this will only work properly if both applications are served from the same domain. Subdomains are fine, so you can still run your applications on different servers. If you don't do this, the application will still run but, as it will not be possible to fully render certain pages on the server, you will see some strange behaviour with users appearing to not be signed in when the application first loads. You might also notice errors when attempting to navigate directly to restricted pages (such as the various administration dashboards). With that in mind, let's setup our servers.","title":"Domains"},{"location":"setup/deployment/#pybossa","text":"Rather than replicating what has already been written, for details of how to deploy PYBOSSA see the PYBOSSA documentation .","title":"PYBOSSA"},{"location":"setup/deployment/#libcrowds","text":"Starting with a fresh Ubuntu 16.04 server, run through the procedures below.","title":"LibCrowds"},{"location":"setup/deployment/#install-nodejs-and-npm","text":"LibCrowds requires Node.js = 8.0.0 to run. Update and upgrade the package index: sudo apt-get update sudo apt-get upgrade Go to your home directory and retrieve the installation script: cd ~ curl -sL https://deb.nodesource.com/setup_8.x -o nodesource_setup.sh Run the script: sudo bash nodesource_setup.sh Install Node.js and the build-essential package: sudo apt-get install nodejs sudo apt-get install build-essential","title":"Install Node.js and npm"},{"location":"setup/deployment/#install-git","text":"LibCrowds is distributed under version control using git , install it by running: sudo apt-get install git-core","title":"Install git"},{"location":"setup/deployment/#download-and-build-libcrowds","text":"Run the following commands to clone the LibCrowds repository into /var/www/libcrowds : mkdir /var/www git clone https://github.com/LibCrowds/libcrowds /var/www/libcrowds Enter the directory: cd /var/www/libcrowds Install LibCrowds' dependencies: npm install Copy the configuration template (see Configuring LibCrowds for details of how to edit this file): cp local.config.js.tmpl local.config.js Build the application: npm run build Tip If the installation or build process is getting killed before finishing it is possible that your server does not have enough memory. You may want to consider upgrading the server or adding some swap space.","title":"Download and build LibCrowds"},{"location":"setup/deployment/#setting-up-nginx","text":"To serve the site using NGINX , first install it: sudo apt - get install nginx Remove the default server configuration: sudo rm -r /etc/nginx/sites-available/default sudo rm -r /etc/nginx/sites-enabled/default Edit a new server configuration file: vim /etc/nginx/sites-available/libcrowds Copy in the following and save the file: map $sent_http_content_type $expires { text/html epoch ; text/html ; charset=utf-8 epoch ; default off ; } server { listen 80 default_server ; listen [::]:80 default_server ; client_body_buffer_size 10K ; client_header_buffer_size 1k ; client_max_body_size 10m ; large_client_header_buffers 2 1k ; gzip on ; gzip_comp_level 2 ; gzip_types text/plain application/xml text/css application/javascript ; gzip_min_length 1000 ; gzip_proxied expired no-cache no-store private auth ; location / { expires $expires ; proxy_redirect off ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_read_timeout 1m ; proxy_connect_timeout 1m ; proxy_pass http://127.0.0.1:8080 ; } } Enable the LibCrowds configuration: ln -s /etc/nginx/sites-available/libcrowds /etc/nginx/sites-enabled/libcrowds Restart the server: sudo service nginx restart","title":"Setting up NGINX"},{"location":"setup/deployment/#setting-up-supervisor","text":"Supervisor is used to run LibCrowds in the background and restart it when the server boots up. sudo apt - get install supervisor Edit a new Supervisor program configuration: vim /etc/supervisor/conf.d/libcrowds.conf Copy in the following and save the file: [program:libcrowds] directory = /var/www/libcrowds command = npm run start autostart = true autorestart = true log_stdout = true log_stderr = true logfile = /var/log/libcrowds.log logfile_maxbytes = 10MB logfile_backups = 2 Restart supervisor: sudo service supervisor stop sudo service supervisor start Your LibCrowds server should now be running at http://your.domain.com . However, we still need to configure the Annotations server.","title":"Setting Up Supervisor"},{"location":"setup/deployment/#explicates","text":"Starting with a fresh Ubuntu 16.04 server, run through the procedures below.","title":"Explicates"},{"location":"setup/deployment/#install-python","text":"Explicates requires Python = 2.7 to run. Update and upgrade the package index: sudo apt-get update sudo apt-get upgrade Install Python: sudo apt install python Install some additional dependencies: sudo apt install python - virtualenv python - dev python - setuptools python - pip","title":"Install Python"},{"location":"setup/deployment/#install-git_1","text":"Explicates is distributed under version control using git , install it by running: sudo apt-get install git-core","title":"Install git"},{"location":"setup/deployment/#download-and-build-explicates","text":"Run the following commands to clone the Explicates repository into /var/www/explicates : mkdir /var/www git clone https://github.com/alexandermendes/explicates /var/www/explicates Enter the directory: cd /var/www/explicates Create and enter a virtual environment: virtualenv env source env/bin/activate Install Explicates: pip install -r requirements.txt Copy the configuration template (see Configuring Explicates for details of how to edit this file): cp settings.py.tmpl settings.py Important You will need to edit the SERVER_NAME setting now to point to the location of your server (e.g. annotations.example.com). It is required to build IDs outside of the request context and this is first done when the database is created below. Copy the alembic configuration template: cp alembic.ini.tmpl alembic.ini","title":"Download and build Explicates"},{"location":"setup/deployment/#seting-up-the-database","text":"Explicates is backed by a PostgreSQL database. Install dependencies: sudo apt-get install postgresql postgresql-server-dev-all python-psycopg2 libpq-dev Add a database user: sudo -u postgres createuser -d -P explicates Enter the password tester when prompted. Info If you choose a different password you should also edit the database path in settings.py and alembic.ini . Create the database: sudo -u postgres createdb explicates -O explicates Populate the database: python /var/www/explicates/bin/db_create.py To check that everything has gone OK so far, you should now be able to type python run.py and see some messages that let you know the develpoment server is running (then press CTRL+C to quit).","title":"Seting up the database"},{"location":"setup/deployment/#setting-up-nginx_1","text":"To setup NGINX , first install it: sudo apt - get install nginx Remove the default server configuration: sudo rm -r /etc/nginx/sites-available/default Edit a new server configuration file: vim /etc/nginx/sites-available/explicates Copy in the following and save the file: server { listen 80 default_server ; listen [::]:80 default_server ; # Change this to match your domain server_name annotations.example.com ; client_body_buffer_size 10K ; client_header_buffer_size 1k ; client_max_body_size 10m ; large_client_header_buffers 2 1k ; gzip on ; gzip_comp_level 2 ; gzip_types text/plain application/json application/ld+json ; gzip_min_length 1000 ; gzip_proxied expired no-cache no-store private auth ; location / { expires -1 ; include uwsgi_params ; uwsgi_pass unix:/tmp/explicates.sock ; } } Enable the Explicates configuration: ln -s /etc/nginx/sites-available/explicates /etc/nginx/sites-enabled/explicates Restart the NGINX server: sudo service nginx restart","title":"Setting up NGINX"},{"location":"setup/deployment/#setting-up-uwsgi","text":"To setup uWSGI , first install it: pip install -U uwsgi Edit a new server configuration file: vim /var/www/explicates/explicates.ini Copy in the following and save the file: [ uwsgi ] socket = /tmp/explicates.sock chmod-socket = 666 chdir = /var/www/explicates pythonpath = .. virtualenv = /var/www/explicates/env module = run:app cpu-affinity = 1 processes = 2 threads = 2 buffer-size = 65535","title":"Setting up uWSGI"},{"location":"setup/deployment/#setting-up-supervisor_1","text":"Supervisor is used to run Explicates in the background and restart it when the server boots up. sudo apt - get install supervisor Edit a new Supervisor program configuration: vim /etc/supervisor/conf.d/explicates.conf Copy in the following and save the file: [program:explicates] command = /var/www/explicates/env/bin/uwsgi /var/www/explicates/explicates.ini directory = /var/www/explicates autostart = true autorestart = true log_stdout = true log_stderr = true logfile = /var/log/explicates.log logfile_maxbytes = 10MB logfile_backups = 2 Restart supervisor: sudo service supervisor stop sudo service supervisor start Your Annotation server should now be running at http://your.domain.com .","title":"Setting Up Supervisor"},{"location":"setup/deployment/#security","text":"There are lots of potential steps that you could take to secure your servers. Running through all of the options here is outside the scope of this guide, but here are some quick wins for the LibCrowds and Explicates servers (details might need to be modified a bit for the PYBOSSA server).","title":"Security"},{"location":"setup/deployment/#firewall","text":"UFW, or Uncomplicated Firewall, is an easy way to manage a frontend firewall. Install it: sudo apt-get install ufw Deny incoming and allow outgoing by default: sudo ufw default deny incoming sudo ufw default allow outgoing Allow connections: sudo ufw allow ssh sudo ufw allow 22 /tcp Check the rules: ufw status You should see the following output: To Action From -- ------ ---- 22 ALLOW Anywhere 80 ALLOW Anywhere 443 ALLOW Anywhere 22 ( v6 ) ALLOW Anywhere ( v6 ) 80 ( v6 ) ALLOW Anywhere ( v6 ) 443 ( v6 ) ALLOW Anywhere ( v6 ) If the rules do indeed appear as above, enable the firewall: sudo ufw enable","title":"Firewall"},{"location":"setup/deployment/#secure-sockets-layer-ssl","text":"Let's Encrypt provide free SSL certificates. Use the Certbot client to set them up for your operating system. After following the Certbot guide, above, you can setup a scheduled task to automatically renew the certificates. Edit a new daily task: vim /etc/cron.daily/certrenew Copy in the following and save the file: certbot renew Make the file executable: chmod +x /etc/cron.daily/certrenew Your certificate should now be checked for renewal daily. The next step is to install the required LibCrowds Plugins .","title":"Secure Sockets Layer (SSL)"},{"location":"setup/installation/","text":"This section explains how to download and install and instance of LibCrowds locally, for testing or development. If you are interested in deploying LibCrowds to a live server, see the Deployment guide. Install VirtualBox, Vagrant and git The easiest way to get started is by using VirtualBox and Vagrant . We will also need to install git, which is the version control system via which both LibCrowds and PYBOSSA are distributed. Follow the links below to download and run the appropriate installers for your operating system. git VirtualBox Vagrant Download and run PYBOSSA Once the above software is succesfully installed, open up a terminal and clone PYBOSSA to your local machine: git clone --recursive https://github.com/Scifabric/pybossa.git Setup the PYBOSSA development environment: cd pybossa vagrant up Run the PYBOSSA server: vagrant ssh python run.py PYBOSSA should now be running (with the default theme) at http://127.0.0.1:5000 Installing behind a web proxy If you're installing from behind a web proxy then you will probably run into issues when attempting to start Vagrant, in which case you can try running these commands from the pybossa directory: # set environment variables using the command for your OS (Windows example shown) set VAGRANT_HTTP_PROXY = http://username:password@proxy_server:proxy_port set VAGRANT_HTTPS_PROXY = https://username:password@proxy_server:proxy_port # install the vagrant-proxyconf plugin vagrant plugin install vagrant-proxyconf Download and run Explicates A server that complies with the Web Annotation Protocol is required to handle the storage and retrieval of user tags and results data. LibCrowds has been built for use with the Explicates server, which complies with the standard protocol and has the additional search functionality required for this application. Currently, a fork of this package is recommended which fixes a bug in the local installation setup script. Once the above software is succesfully installed, open up a terminal and clone the forked version of Explicates to your local machine: git clone https://github.com/harryjmoss/explicates.git Setup the Explicates development environment: cd explicates vagrant up Run the Explicates server: vagrant ssh python run.py Explicates should now be running at http://127.0.0.1:3000 Installing behind a web proxy If you're installing from behind a web proxy then you will probably run into issues when attempting to start Vagrant, in which case you can try running these commands from the pybossa directory: # set environment variables using the command for your OS (Windows example shown) set VAGRANT_HTTP_PROXY = http://username:password@proxy_server:proxy_port set VAGRANT_HTTPS_PROXY = https://username:password@proxy_server:proxy_port # install the vagrant-proxyconf plugin vagrant plugin install vagrant-proxyconf Download and run LibCrowds The same process is followed to setup the LibCrowds development environment: git clone https://github.com/LibCrowds/libcrowds.git Setup the LibCrowds development environment: cd libcrowds cp local.config.js.tmpl local.config.js npm install Run the LibCrowds server: npm run dev Installing behind a web proxy If you're installing from behind a web proxy then you will probably run into issues when attempting to start Vagrant, in which case you can try running these commands from the libcrowds directory: # set environment variables using the command for your OS (Windows example shown) set VAGRANT_HTTP_PROXY = http://username:password@proxy_server:proxy_port set VAGRANT_HTTPS_PROXY = https://username:password@proxy_server:proxy_port # install the vagrant-proxyconf plugin vagrant plugin install vagrant-proxyconf LibCrowds should now be running, using the default settings, at http://127.0.0.1:8080 . Info You must access the website at http://127.0.0.1:8080, rather than http://localhost:8080, otherwise it will not be possible to track the user session cookie. However, if you attempt to open the site now you are likely to see an error message as the two servers have not yet been configured to communicate properly with each other, nor have we installed the required plugins. The next step is to install the required Plugins .","title":"Local Installation"},{"location":"setup/installation/#install-virtualbox-vagrant-and-git","text":"The easiest way to get started is by using VirtualBox and Vagrant . We will also need to install git, which is the version control system via which both LibCrowds and PYBOSSA are distributed. Follow the links below to download and run the appropriate installers for your operating system. git VirtualBox Vagrant","title":"Install VirtualBox, Vagrant and git"},{"location":"setup/installation/#download-and-run-pybossa","text":"Once the above software is succesfully installed, open up a terminal and clone PYBOSSA to your local machine: git clone --recursive https://github.com/Scifabric/pybossa.git Setup the PYBOSSA development environment: cd pybossa vagrant up Run the PYBOSSA server: vagrant ssh python run.py PYBOSSA should now be running (with the default theme) at http://127.0.0.1:5000 Installing behind a web proxy If you're installing from behind a web proxy then you will probably run into issues when attempting to start Vagrant, in which case you can try running these commands from the pybossa directory: # set environment variables using the command for your OS (Windows example shown) set VAGRANT_HTTP_PROXY = http://username:password@proxy_server:proxy_port set VAGRANT_HTTPS_PROXY = https://username:password@proxy_server:proxy_port # install the vagrant-proxyconf plugin vagrant plugin install vagrant-proxyconf","title":"Download and run PYBOSSA"},{"location":"setup/installation/#download-and-run-explicates","text":"A server that complies with the Web Annotation Protocol is required to handle the storage and retrieval of user tags and results data. LibCrowds has been built for use with the Explicates server, which complies with the standard protocol and has the additional search functionality required for this application. Currently, a fork of this package is recommended which fixes a bug in the local installation setup script. Once the above software is succesfully installed, open up a terminal and clone the forked version of Explicates to your local machine: git clone https://github.com/harryjmoss/explicates.git Setup the Explicates development environment: cd explicates vagrant up Run the Explicates server: vagrant ssh python run.py Explicates should now be running at http://127.0.0.1:3000 Installing behind a web proxy If you're installing from behind a web proxy then you will probably run into issues when attempting to start Vagrant, in which case you can try running these commands from the pybossa directory: # set environment variables using the command for your OS (Windows example shown) set VAGRANT_HTTP_PROXY = http://username:password@proxy_server:proxy_port set VAGRANT_HTTPS_PROXY = https://username:password@proxy_server:proxy_port # install the vagrant-proxyconf plugin vagrant plugin install vagrant-proxyconf","title":"Download and run Explicates"},{"location":"setup/installation/#download-and-run-libcrowds","text":"The same process is followed to setup the LibCrowds development environment: git clone https://github.com/LibCrowds/libcrowds.git Setup the LibCrowds development environment: cd libcrowds cp local.config.js.tmpl local.config.js npm install Run the LibCrowds server: npm run dev Installing behind a web proxy If you're installing from behind a web proxy then you will probably run into issues when attempting to start Vagrant, in which case you can try running these commands from the libcrowds directory: # set environment variables using the command for your OS (Windows example shown) set VAGRANT_HTTP_PROXY = http://username:password@proxy_server:proxy_port set VAGRANT_HTTPS_PROXY = https://username:password@proxy_server:proxy_port # install the vagrant-proxyconf plugin vagrant plugin install vagrant-proxyconf LibCrowds should now be running, using the default settings, at http://127.0.0.1:8080 . Info You must access the website at http://127.0.0.1:8080, rather than http://localhost:8080, otherwise it will not be possible to track the user session cookie. However, if you attempt to open the site now you are likely to see an error message as the two servers have not yet been configured to communicate properly with each other, nor have we installed the required plugins. The next step is to install the required Plugins .","title":"Download and run LibCrowds"},{"location":"setup/introduction/","text":"LibCrowds is fundamentally a Vue.js Server-Side Rendered UI, where the backend comprises various custom plugins, an instance of PYBOSSA and a server that complies with the Web Annotation Protocol . Therefore, to get up and running we need to install, configure and run an instance of LibCrowds, an instance of PYBOSSA, some PYBOSSA plugins and a Web Annotation server. The following pages will take you through everything you need to get a up and running locally, or to deploy to a production server. Requirements PYBOSSA = v2.9.0 Node.js = 8.0.0 To find out how to get LibCrowds up and running locally see the Local Installation guide. See the Deployment guide for guidance on deploying to a production server.","title":"Introduction"},{"location":"setup/plugins/","text":"Most of LibCrowds' custom functionality is handled via the core frontend application. However, some functionality such as results analysis, can only be dealt with effectively on the backend server, so we need to install a few additional PYBOSSA plugins. The following page will guide you through the steps required. Navigate to your PYBOSSA root folder: cd /path/to/pybossa If you are running locally, enter the virtual machine: vagrant ssh Otherwise, if you're setting up a production server, activate your virtual environement: source pybossa/env/bin/activate Now install the various plugins. pybossa-z3950 This plugin handles the communication with Z39.50 databases that is required to use the platforms Z39.50 task presenter. Install dependencies: sudo apt-get install libxml2-dev libxslt-dev python-dev lib32z1-dev Clone the plugin repo: git clone https://github.com/alexandermendes/pybossa-z3950 pybossa/plugins Install the plugin and return to root folder: cd pybossa/plugins/pybossa-z3950 python setup.py install cd .. cp -r pybossa-z3950/pybossa_z3950 pybossa_z3950 cd /path/to/pybossa pybossa-lc-email This plugin replaces the default email templates with custom LibCrowds templates. Clone the plugin repo: git clone https://github.com/LibCrowds/pybossa-lc-email pybossa/plugins Activate the plugin and return to root folder: cd pybossa/plugins cp -r pybossa-lc-email/pybossa_lc_email pybossa_lc_email cd /path/to/pybossa pybossa-lc This plugin handles various bits of LibCrowds-specific functionality, such as results analysis, generation of Web Annotations and project management via templates. Clone the plugin repo: git clone https://github.com/LibCrowds/pybossa-lc pybossa/plugins Install the plugin: cd pybossa/plugins/pybossa-lc pip install -r requirements.txt cd .. cp -r pybossa-lc/pybossa_lc pybossa_lc The plugins will be available after you restart the server. Important Some plugins import Flask modules in a deprecated manner, causing warnings when launching the server. The issue is related to several calls in the __init__.py files in PyBossa plugins that import Flask submodules in a deprecated manner. These warnings should be patched in a future update, but a temporary fix is obtained with the following: Flask extension import statements such as import flask.ext.plugins should be replaced with import flask_plugins Affected files include: pybossa / plugins / pybossa_lc / __init__ . py pybossa / plugins / pybossa_lc_email / __init__ . py pybossa / plugins / pybossa_z3950 / __init__ . py pybossa / plugins / pybossa_lc / api / projects . py pybossa / plugins / pybossa_lc / api / categories . py pybossa / plugins / pybossa_lc / api / admin . py Additionally, the following warning may be observed when calling python run.py : WARNING : Couldn t create PyZ3950 . PyZ3950_parsetab . [Errno 20] Not a directory: /home/vagrant/pybossa-env/lib/python2.7/site-packages/mollyZ3950-2.04_molly1-py2.7-linux-x86_64.egg/PyZ3950/ PyZ3950_parsetab . py type exceptions . ImportError ( No module named ext . z3950 ,) No module named ext . z3950 Z39 . 50 plugin disabled Again, a temporary fix for this is obtained with the following: pip uninstall mollyZ3950 wget https : // files . pythonhosted . org / packages / 6 a / 34 / 8176 b841926a2add20524a9f74c307ac5fe6e33e9f4af12a58e6f7223982 / mollyZ3950 - 2 . 04 - molly1 . tar . gz pip install mollyZ3950 - 2 . 04 - molly1 . tar . gz pip uninstall Flask - Z3950 pip install Flask - Z3950 in combination with changing flask.ext.* for flask_* in / home / vagrant / pybossa - env / lib / python2 . 7 / site - packages / flask_z3950 / view . py The next step is Configuring PYBOSSA .","title":"Plugins"},{"location":"setup/plugins/#pybossa-z3950","text":"This plugin handles the communication with Z39.50 databases that is required to use the platforms Z39.50 task presenter. Install dependencies: sudo apt-get install libxml2-dev libxslt-dev python-dev lib32z1-dev Clone the plugin repo: git clone https://github.com/alexandermendes/pybossa-z3950 pybossa/plugins Install the plugin and return to root folder: cd pybossa/plugins/pybossa-z3950 python setup.py install cd .. cp -r pybossa-z3950/pybossa_z3950 pybossa_z3950 cd /path/to/pybossa","title":"pybossa-z3950"},{"location":"setup/plugins/#pybossa-lc-email","text":"This plugin replaces the default email templates with custom LibCrowds templates. Clone the plugin repo: git clone https://github.com/LibCrowds/pybossa-lc-email pybossa/plugins Activate the plugin and return to root folder: cd pybossa/plugins cp -r pybossa-lc-email/pybossa_lc_email pybossa_lc_email cd /path/to/pybossa","title":"pybossa-lc-email"},{"location":"setup/plugins/#pybossa-lc","text":"This plugin handles various bits of LibCrowds-specific functionality, such as results analysis, generation of Web Annotations and project management via templates. Clone the plugin repo: git clone https://github.com/LibCrowds/pybossa-lc pybossa/plugins Install the plugin: cd pybossa/plugins/pybossa-lc pip install -r requirements.txt cd .. cp -r pybossa-lc/pybossa_lc pybossa_lc The plugins will be available after you restart the server. Important Some plugins import Flask modules in a deprecated manner, causing warnings when launching the server. The issue is related to several calls in the __init__.py files in PyBossa plugins that import Flask submodules in a deprecated manner. These warnings should be patched in a future update, but a temporary fix is obtained with the following: Flask extension import statements such as import flask.ext.plugins should be replaced with import flask_plugins Affected files include: pybossa / plugins / pybossa_lc / __init__ . py pybossa / plugins / pybossa_lc_email / __init__ . py pybossa / plugins / pybossa_z3950 / __init__ . py pybossa / plugins / pybossa_lc / api / projects . py pybossa / plugins / pybossa_lc / api / categories . py pybossa / plugins / pybossa_lc / api / admin . py Additionally, the following warning may be observed when calling python run.py : WARNING : Couldn t create PyZ3950 . PyZ3950_parsetab . [Errno 20] Not a directory: /home/vagrant/pybossa-env/lib/python2.7/site-packages/mollyZ3950-2.04_molly1-py2.7-linux-x86_64.egg/PyZ3950/ PyZ3950_parsetab . py type exceptions . ImportError ( No module named ext . z3950 ,) No module named ext . z3950 Z39 . 50 plugin disabled Again, a temporary fix for this is obtained with the following: pip uninstall mollyZ3950 wget https : // files . pythonhosted . org / packages / 6 a / 34 / 8176 b841926a2add20524a9f74c307ac5fe6e33e9f4af12a58e6f7223982 / mollyZ3950 - 2 . 04 - molly1 . tar . gz pip install mollyZ3950 - 2 . 04 - molly1 . tar . gz pip uninstall Flask - Z3950 pip install Flask - Z3950 in combination with changing flask.ext.* for flask_* in / home / vagrant / pybossa - env / lib / python2 . 7 / site - packages / flask_z3950 / view . py The next step is Configuring PYBOSSA .","title":"pybossa-lc"},{"location":"setup/testing/","text":"Tests are written using Jest and run each time a commit is pushed using Travis CI . Run the tests with the following commands: # build (required for testing with nuxt components) npm run build # run lint npm lint # run unit tests npm unit # run all tests npm test","title":"Testing"},{"location":"site/announcements/","text":"Global announcements can be delivered to all users via this section. Announcements consist of a title, optional further description and an internal or external link. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Select Announcements from the main menu. A screenshot of the site admin announcements page Announcements will be displayed via the main navigation bar, as shown below. A screenshot of a global announcement Making an announcement The make an announcement click the New button at the top of the page. Enter a title, an optional additional description (keep it short) and an internal or external URL. After clicking Submit you will be taken to the update page where you can modify the above fields and choose a thumbnail for the announcement. When you're ready, publish the announcement by clicking the Publish toggle. Editing an announcement To edit the content or thumbnail of an announcement, locate it in the table and click Edit . Deleting an announcement To delete an announcement, locate it in the table and click Remove .","title":"Announcements"},{"location":"site/announcements/#making-an-announcement","text":"The make an announcement click the New button at the top of the page. Enter a title, an optional additional description (keep it short) and an internal or external URL. After clicking Submit you will be taken to the update page where you can modify the above fields and choose a thumbnail for the announcement. When you're ready, publish the announcement by clicking the Publish toggle.","title":"Making an announcement"},{"location":"site/announcements/#editing-an-announcement","text":"To edit the content or thumbnail of an announcement, locate it in the table and click Edit .","title":"Editing an announcement"},{"location":"site/announcements/#deleting-an-announcement","text":"To delete an announcement, locate it in the table and click Remove .","title":"Deleting an announcement"},{"location":"site/dashboard/","text":"The dashboard provides an overview of activity on the platform over the past week, including: New, returning and active users; New tasks and contributions; Projects created, published and updated. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Select Dashboard from the dropdown menu. A screenshot of the site admin dashboard page Refreshing the statistics Statistics are updated automatically every 24 hours. If you want to see the most recent data you can click the Refresh button.","title":"Dashboard"},{"location":"site/dashboard/#refreshing-the-statistics","text":"Statistics are updated automatically every 24 hours. If you want to see the most recent data you can click the Refresh button.","title":"Refreshing the statistics"},{"location":"site/jobs/","text":"The LibCrowds platform runs a range of scheduled tasks in the background to handle things such as email delivery, updating statistics and building data files. The interface provided here can be useful for diagnosing any issues with these tasks (check the failed tasks list). Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Select Background Jobs from the main menu. A screenshot of the site admin jobs page","title":"Background Jobs"},{"location":"site/pending-templates/","text":"When a user submits a new template, or proposes an update to an existing one, the template will be listed on this page for an administrator to approve or reject. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Select Pending Templates from the main menu. A screenshot of the site admin pending templates page Viewing the changes Click the Show Details button to view the proposed changes, which will be highlighted in green. A screenshot highlighting pending changes for a template Approving Approved templates can be used to generate projects for a collection microsite. To approve a template click the Approve button. An email will then be sent to the creator of that template to let them know that the changes have been accepted. Rejecting If updates to a template are not deemed to be acceptable for some reason, you can reject it by clicking the Reject button. A popup will be shown asking for the reason for rejection and what could be done before the template is accepted. This message will be sent to the creator of that template. Note that the message will be wrapped with some standard text. A markdown representation of that message is presented below, where the {{ reason }} tag is replaced with the custom rejection message. Hello {{ user [ fullname ] }}, You submitted a request to create or update the {{ template [ name ] }} template . Unfortunately , we didn t think that the proposed changes were suitable for the following reason : {{ reason }} Please get in touch at [{{ config . CONTACT_EMAIL }}] ( mailto :{{ config . CONTACT_EMAIL }} ) for further guidance . Regards , {{ config . BRAND }} Team","title":"Pending Templates"},{"location":"site/pending-templates/#viewing-the-changes","text":"Click the Show Details button to view the proposed changes, which will be highlighted in green. A screenshot highlighting pending changes for a template","title":"Viewing the changes"},{"location":"site/pending-templates/#approving","text":"Approved templates can be used to generate projects for a collection microsite. To approve a template click the Approve button. An email will then be sent to the creator of that template to let them know that the changes have been accepted.","title":"Approving"},{"location":"site/pending-templates/#rejecting","text":"If updates to a template are not deemed to be acceptable for some reason, you can reject it by clicking the Reject button. A popup will be shown asking for the reason for rejection and what could be done before the template is accepted. This message will be sent to the creator of that template. Note that the message will be wrapped with some standard text. A markdown representation of that message is presented below, where the {{ reason }} tag is replaced with the custom rejection message. Hello {{ user [ fullname ] }}, You submitted a request to create or update the {{ template [ name ] }} template . Unfortunately , we didn t think that the proposed changes were suitable for the following reason : {{ reason }} Please get in touch at [{{ config . CONTACT_EMAIL }}] ( mailto :{{ config . CONTACT_EMAIL }} ) for further guidance . Regards , {{ config . BRAND }} Team","title":"Rejecting"},{"location":"site/results/","text":"The results admin page provides an overview of all results Annotations on the site. Links to the Annotations for each collection microsite are provided, along with buttons to export as JSON, or manually trigger the results analysis process for a particular collection. Note that there are certain scenarios where results will be excluded from the processes below, see Results Analysis: Exclusion for details. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Select Results from the main menu. A screenshot of the site admin results page The options listed below assume that an AnnotationCollection has been configured to store the results for a collection microsite. If this is not the case then the buttons mentioned below will not appear, instead you will see a button to guide you to Setup Results Annotations for the collection. Analysing empty results Once a task is complete, it is only when the results analysis process runs that all associated contributions are checked and the final result annotations generated. If you are migrating from an old version of the software, or if the backend server has failed at a critical moment, you may end up with results for which the analysis process was not completed. To trigger the analysis process for all unanalysed results, click the Analyse Empty button. This function will not destroy any current Annotations. It will only process the results to which no Annotations are currently linked. Analysing all results There may be occasions where you want to trigger the analysis process to be re-run for all results associated with a collection. For instance, if you need to migrate all of your data to a new annotation server and do not need to maintain the current Annotation IDs for any reason. To trigger the analysis process for all results, click the Analyse All button. WARNING This function is destructive, it will destroy all current Annotations and recreate them with new IDs. If for any reason you need to refer back to the current Annotations by ID then this function should not be run. Downloading results For the purposes of migration or offline analysis, all result Annotations can be downloaded as a zipped JSON file. To trigger the download, click the Download button alongside the relevant collection.","title":"Results"},{"location":"site/results/#analysing-empty-results","text":"Once a task is complete, it is only when the results analysis process runs that all associated contributions are checked and the final result annotations generated. If you are migrating from an old version of the software, or if the backend server has failed at a critical moment, you may end up with results for which the analysis process was not completed. To trigger the analysis process for all unanalysed results, click the Analyse Empty button. This function will not destroy any current Annotations. It will only process the results to which no Annotations are currently linked.","title":"Analysing empty results"},{"location":"site/results/#analysing-all-results","text":"There may be occasions where you want to trigger the analysis process to be re-run for all results associated with a collection. For instance, if you need to migrate all of your data to a new annotation server and do not need to maintain the current Annotation IDs for any reason. To trigger the analysis process for all results, click the Analyse All button. WARNING This function is destructive, it will destroy all current Annotations and recreate them with new IDs. If for any reason you need to refer back to the current Annotations by ID then this function should not be run.","title":"Analysing all results"},{"location":"site/results/#downloading-results","text":"For the purposes of migration or offline analysis, all result Annotations can be downloaded as a zipped JSON file. To trigger the download, click the Download button alongside the relevant collection.","title":"Downloading results"},{"location":"site/user-management/","text":"LibCrowds administrators can view details or modify rights data for registered users via this section. The search bar at the top of the page can be used to locate users by name. Administrator rights required To request administrator rights please get in touch by clicking the email icon in the footer of this page. How do I open this page? Admin rights are required to access this page. If you have admin rights: Sign in to your LibCrowds account. Select User Management from the main menu. A screenshot of the site admin user management page Granting admin rights To grant administrator rights for a user, search for them by name and click Grant admin rights . Warning Administrators are able to edit or delete all data on the platform, so these rights should be granted sparingly. Revoking admin rights To revoke administrator rights for a user, search for them by name or click the Always show admins toggle, then click Revoke admin rights . Exporting user data A CSV file containing a subset of the user data can be downloaded by clicking the Export All button at the top of the page. This file includes names, email addresses, creation times and details of admin rights.","title":"User Management"},{"location":"site/user-management/#granting-admin-rights","text":"To grant administrator rights for a user, search for them by name and click Grant admin rights . Warning Administrators are able to edit or delete all data on the platform, so these rights should be granted sparingly.","title":"Granting admin rights"},{"location":"site/user-management/#revoking-admin-rights","text":"To revoke administrator rights for a user, search for them by name or click the Always show admins toggle, then click Revoke admin rights .","title":"Revoking admin rights"},{"location":"site/user-management/#exporting-user-data","text":"A CSV file containing a subset of the user data can be downloaded by clicking the Export All button at the top of the page. This file includes names, email addresses, creation times and details of admin rights.","title":"Exporting user data"}]}